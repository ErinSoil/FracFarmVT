RFtestSHM <- ranger(mgCpergSoilM ~ ., data = fracData_soilhealthM, importance = "permutation")
RFtestSHM$variable.importance
RFtestSHprop <- ranger(propM ~ ., data = fracData_soilhealthpropM, importance = "permutation")
RFtestSHprop$variable.importance
#negative relationship with Prop M and soil health. Interesting
RFtestSHP <- ranger(mgCpergSoilP ~ ., data = fracData_soilhealthP, importance = "permutation")
RFtestSHP$variable.importance
RFtestM <- ranger(mgCpergSoilM ~ ., data = fracData_rmALLgM, importance = "permutation")
RFtestM$variable.importance
RFtestP <- ranger(mgCpergSoilP ~ ., data = fracData_rmALLgP, importance = "permutation")
RFtestP$variable.importance
RFtestprop <- ranger(propM ~ ., data = fracData_rmALLpm, importance = "permutation")
RFtestprop$variable.importance
#create partial dependance plots for mgCpergSoil(MAOM)
model_data_1 <- Predictor$new(RFtestM, data =  fracData_rmALLgM %>%
dplyr::select(-mgCpergSoilM))
pdp_all <- FeatureEffects$new(model_data_1, method = "pdp")
plot(pdp_all)
#create partial dependance plots for mgCpergSoil(POM)
model_data_1 <- Predictor$new(RFtestP, data =  fracData_rmALLgP %>%
dplyr::select(-mgCpergSoilP))
pdp_all <- FeatureEffects$new(model_data_1, method = "pdp")
plot(pdp_all)
#create partial dependance plots for PropMAOM
model_data_1 <- Predictor$new(RFtestprop, data = fracData_rmALL %>%
dplyr::select(-propM))
model_data_1 <- Predictor$new(RFtestprop, data = fracData_rmALLprop %>%
dplyr::select(-propM))
model_data_1 <- Predictor$new(RFtestprop, data = fracData_rmALLpm %>%
dplyr::select(-propM))
pdp_all <- FeatureEffects$new(model_data_1, method = "pdp")
plot(pdp_all)
model_data_M <- Predictor$new(RFtestM, data =  fracData_rmALLgM %>%
dplyr::select(-mgCpergSoilM))
pdp_M <- FeatureEffects$new(model_data_M, method = "pdp")
plot(pdp_M)
model_data_M <- Predictor$new(RFtestM, data =  fracData_rmALLgM %>%
dplyr::select(-mgCpergSoilM))
pdp_M <- FeatureEffects$new(model_data_M, method = "pdp")
plot(pdp_M)+
ggtitle("mgCpergSoilM")
plot(pdp_M)+
scale_y_countinous("mgCpergSoilM")
plot(pdp_M)+
scale_y_continous("mgCpergSoilM")
plot(pdp_M)+
scale_y_continuous("mgCpergSoilM")
model_data_P <- Predictor$new(RFtestP, data =  fracData_rmALLgP %>%
dplyr::select(-mgCpergSoilP))
pdp_P <- FeatureEffects$new(model_data_P, method = "pdp")
plot(pdp_P)+
ggtitle("mgCpergSoilP")
model_data_1 <- Predictor$new(RFtestprop, data = fracData_rmALLpm %>%
dplyr::select(-propM))
pdp_all <- FeatureEffects$new(model_data_1, method = "pdp")
plot(pdp_all)+
ggtitle("propM")
model_data_SHM <- Predictor$new(RFtestSHM, data =  fracData_soilhealthM%>%
dplyr::select(-mgCpergSoilM))
model_data_SHM <- Predictor$new(RFtestSHM, data =  fracData_soilhealthM%>%
dplyr::select(-mgCpergSoilM))
model_data_SHM <- Predictor$new(RFtestSHM, data =  fracData_soilhealthM%>%
dplyr::select(-mgCpergSoilM))
str(fracData)
fracData %<%
mutate(
organicNew = case_when(
organic == 0 ~ "NotOrganic",
organic== 1 ~ "Organic",
TRUE~"Other"))
fracData %>%
mutate(
organicNew = case_when(
organic == 0 ~ "NotOrganic",
organic== 1 ~ "Organic",
TRUE~"Other"))
fracData_rmALLpm <- fracData %>%
mutate(
organicNew = case_when(
organic == 0 ~ "NotOrganic",
organic== 1 ~ "Organic",
TRUE~"Other")) %>%
select(organicNew,active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, propM) %>%
#remove the rows with ~25ish missing data
drop_na()
RFtestprop <- ranger(propM ~ ., data = fracData_rmALLpm, importance = "permutation")
RFtestprop$variable.importance
model_data_propM <- Predictor$new(RFtestprop, data = fracData_rmALLpm %>%
dplyr::select(-propM))
pdp_propM <- FeatureEffects$new(model_data_propM, method = "pdp")
plot(pdp_propM)+
ggtitle("propM")
model_data_P <- Predictor$new(RFtestP, data =  fracData_rmALLgP %>%
dplyr::select(-mgCpergSoilP))
pdp_P <- FeatureEffects$new(model_data_P, method = "pdp")
plot(pdp_P)+
ggtitle("mgCpergSoilP")
fracData %>%
ggplot(aes(x = k, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = mg, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = fe, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = fe, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = k, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = mn, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = k, y = mgCpergSoilP)) +
geom_point()
fracData %>%
ggplot(aes(x = k, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = zn, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = miner_element_rating, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = minor_element_rating, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = minor_element_rating, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = minor_elements_rating, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = p, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = ph, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = active_carbon, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = active_carbon, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = respiration, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = respiration, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = ace_soil_protein_index, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = ace_soil_protein_index_rating, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = total_c, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = total_c, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = soc, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = water_capacity, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = soil_texture_sand, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = soil_texture_silt, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Yields, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Yields, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = Plants, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Type.x, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Plants, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = croprotation, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = CropLastYr, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = CropThisYr, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = CropLastYr, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = animal, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = years.since.till, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = cutshay, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = till.passes, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = till.depth, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Tillage_1to4, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Organic.matter.additions, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Soil.amendments, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = plastic.mulch, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = herbicides, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = insecticides, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = treated.seed, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = organic, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = irrigation, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Pattern.Drainage.Tile, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = OM30, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = OM30, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = BD30, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = surface_hardness, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Mod..Morgan.Al..ppm, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Mod..Morgan.Ca..ppm, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Mod..Morgan.Cu..ppm, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Mod..Morgan.S..ppm, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Mod..Morgan.B..ppm, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = CN_ratio, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Elevation..ft., y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Latitude, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Longitude, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = ppt.cm, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = tmeanC, y = mgCpergSoilM)) +
geom_point()
RFtestAgSt <- ranger(aggregate_stability ~ ., data = fracData_rmALLgM, importance = "permutation")
RFtestAgSt$variable.importance
plot(pdp_AgSt)+
ggtitle("AggregateStability")
model_data_AgSt <- Predictor$new(RFtestAgSt, data = fracData_rmALLgM %>%
dplyr::select(-aggregate_stability))
pdp_AgSt <- FeatureEffects$new(model_data_AgSt, method = "pdp")
plot(pdp_AgSt)+
ggtitle("AggregateStability")
fracData_rmALLC<- fracData %>%
select(total_C,active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, aggregate_stability, pred_water_capacity, mgCpergSoilP) %>%
#remove the rows with ~25ish missing data
drop_na()
fracData_rmALLC<- fracData %>%
select(total_c,active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, aggregate_stability, pred_water_capacity, mgCpergSoilP) %>%
#remove the rows with ~25ish missing data
drop_na()
RFtestC <- ranger(total_c ~ ., data = fracData_rmALLC, importance = "permutation")
RFtestC$variable.importance
model_data_C <- Predictor$new(RFtestC, data = fracData_rmALLC %>%
dplyr::select(-total_c))
pdp_C <- FeatureEffects$new(model_data_AgSt, method = "pdp")
plot(pdp_C)+
ggtitle("TotalCarbon")
RFtestSHM <- ranger(mgCpergSoilM ~ ., data = fracData_soilhealthM, importance = "permutation")
RFtestSHM$variable.importance
RFtestSHprop <- ranger(propM ~ ., data = fracData_soilhealthpropM, importance = "permutation")
RFtestSHprop$variable.importance
#negative relationship with Prop M and soil health. Interesting
RFtestSHP <- ranger(mgCpergSoilP ~ ., data = fracData_soilhealthP, importance = "permutation")
RFtestSHP$variable.importance
#run with more variables #change the dataset fracData_rmALL to include dependent variable each time
RFtestM <- ranger(mgCpergSoilM ~ ., data = fracData_rmALLgM, importance = "permutation")
RFtestM$variable.importance
RFtestP <- ranger(mgCpergSoilP ~ ., data = fracData_rmALLgP, importance = "permutation")
RFtestP$variable.importance
RFtestprop <- ranger(propM ~ ., data = fracData_rmALLpm, importance = "permutation")
RFtestprop$variable.importance
model_data_M <- Predictor$new(RFtestM, data =  fracData_rmALLgM %>%
dplyr::select(-mgCpergSoilM))
pdp_M <- FeatureEffects$new(model_data_M, method = "pdp")
plot(pdp_M)+
ggtitle("mgCpergSoilM")
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
#load your libraries
library(tidyverse)
library(ggplot2)
library(dplyr)
library(corrplot)
library(emmeans)
fracData <- read.csv(file="fracData.csv", header=TRUE, sep=",")
# Get summary statistics
data_summary <- summary(Mang)
View(fracData)
data <- data %>%
mutate(claycategory=cut(soil_texture_clay, breaks=c(-Inf, 14, 24, Inf), labels=c("low","med", "high")))
data <- data %>%
mutate(claycategory=cut(soil_texture_clay, breaks=c(-Inf, 14, 24, Inf), labels=c("low","med", "high")))
ggplot(data=data, aes(x=tmeanC, y=mgCpergSoilM, col=soil_texture_clay))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ claycategory, ncol=1, scales="free_x")
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
#load your libraries
library(tidyverse)
library(ggplot2)
library(dplyr)
library(corrplot)
library(emmeans)
fracData <- read.csv(file="fracData.csv", header=TRUE, sep=",")
View (data)
data <- read.csv(file="fracData.csv", header=TRUE, sep=",")
View (data)
data <- data %>%
mutate(claycategory=cut(soil_texture_clay, breaks=c(-Inf, 14, 24, Inf), labels=c("low","med", "high")))
ggplot(data=data, aes(x=tmeanC, y=mgCpergSoilM, col=soil_texture_clay))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ claycategory, ncol=1, scales="free_x")
data <- data %>%
mutate(claycategory=cut(soil_texture_clay, breaks=c(-Inf, 14, 24, Inf), labels=c("low","med", "high")))
ggplot(data=data, aes(x=ppt.cm, y=mgCpergSoilM, col=soil_texture_clay))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ claycategory, ncol=1, scales="free_x")
data <- data %>%
mutate(phcategory=cut(ph, breaks=c(-Inf,6.17, 6.52, 6.93, Inf), labels=c("low","med","high", "veryhigh")))
ggplot(data=data, aes(x=tmeanC, y=mgCpergSoilM, col=ph))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ phcategory, ncol=1, scales="free_x")
data <- data %>%
mutate(phcategory=cut(ph, breaks=c(-Inf,6.17, 6.52, 6.93, Inf), labels=c("low","med","high", "veryhigh")))
ggplot(data=data, aes(x=ppt.cm, y=mgCpergSoilM, col=ph))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ phcategory, ncol=1, scales="free_x")
data <- data %>%
mutate(pptcategory=cut(ppt.cm, breaks=c(-Inf,101.4, 106.4, 110.0, Inf), labels=c("low","med","high", "veryhigh")))
ggplot(data=data, aes(x=tmeanC, y=mgCpergSoilM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
data <- data %>%
mutate(pptcategory=cut(ppt.cm, breaks=c(-Inf,101.4, 106.4, 110.0, Inf), labels=c("low","med","high", "veryhigh")))
ggplot(data=data, aes(x=aggregate_stability, y=mgCpergSoilM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
data <- data %>%
mutate(pptcategory=cut(ppt.cm, breaks=c(-Inf,101.4, 106.4, 110.0, Inf), labels=c("low","med","high", "veryhigh")))
ggplot(data=data, aes(x=ph, y=mgCpergSoilM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
data <- data %>%
mutate(pptcategory=cut(ppt.cm, breaks=c(-Inf,101.4, 106.4, 110.0, Inf), labels=c("low","med","high", "veryhigh")))
ggplot(data=data, aes(x=active.carbon, y=mgCpergSoilM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
cordata <- cor(data[,c("mgCpergSoilM","ph","ppt.cm","tmeanC","aggregate_stability","soil_texture_clay","active_carbon")], use="pairwise.complete.obs", method="pearson")
corrplot(cordata)
m1=gls(mgCpergSoilM~ppt.cm*soil_texture_clay+
soil_texture_clay*tmeanC+ppt.cm*tmeanC+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
library(nlme)
m1=gls(mgCpergSoilM~ppt.cm*soil_texture_clay+
soil_texture_clay*tmeanC+ppt.cm*tmeanC+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
summary(m1)
anova(m1)
m1a=gls(mgCpergSoilM~ppt.cm*soil_texture_clay+
soil_texture_clay*tmeanC+ppt.cm*tmeanC+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, weights = varFixed(~mgCpergSoilM), method="REML")
anova(m1, m1a) #adding variance structure does not improve the model
m1=gls(mgCpergSoilM~ppt.cm*soil_texture_clay+
soil_texture_clay*tmeanC+ppt.cm*tmeanC+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, method="REML")
summary(m1)
anova(m1)
F_Final <- fitted(m1)
R_Final <- residuals(m1, type = "pearson", scaled = TRUE)
N = !is.na(data$mgCpergSoilM)
Rfull <- NA
Rfull[N] <- R_Final
op <- par(mfrow = c(2,2), mar = c(5,4,1,1))  #I can't figure this part out
plot(F_Final, R_Final)
hist(Rfull)
plot(Rfull ~ data$aggregate_stability)
plot(Rfull ~ data$soil_texture_clay)
plot(Rfull ~ data$active_carbon)
plot(Rfull ~ data$tmeanC)
plot(Rfull ~ data$ppt.cm)
plot(Rfull ~ data$ph)
par(op)
op <- par(mfrow = c(2,2), mar = c(5,4,1,1)) #this makes it so all the graphs are plotted in the same window (a 2 x 2 grid)
ppt.cm.c <- summary(m1)$coefficients[2] #predictor coefficient
ppt.cm.pr <- Rfull + ppt.cm.c*data$ppt.cm  #Residuals + pred coef * predictor value
{scatter.smooth(data$ppt.cm, ppt.cm.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(ppt.cm.c*data$ppt.cm ~ data$ppt.cm), col = "red")}
soil_texture_clay.c <- summary(m1)$coefficients[3] #predictor coefficient
soil_texture_clay.pr <- Rfull + soil_texture_clay.c*data$soil_texture_clay  #Residuals + pred coef * predictor value
{scatter.smooth(data$soil_texture_clay, soil_texture_clay.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(soil_texture_clay.c*data$soil_texture_clay ~ data$soil_texture_clay), col = "red")}
aggregate_stability.c <- summary(m1)$coefficients[5] #predictor coefficient
aggregate_stability.pr <- Rfull + aggregate_stability.c*data$aggregate_stability  #Residuals + pred coef * predictor value
{scatter.smooth(data$aggregate_stability, aggregate_stability.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(aggregate_stability.c*data$aggregate_stability ~ data$aggregate_stability), col = "red")}
active_carbon.c <- summary(m1)$coefficients[6] #predictor coefficient
active_carbon.pr <- Rfull + active_carbon.c*data$active_carbon  #Residuals + pred coef * predictor value
{scatter.smooth(data$active_carbon, active_carbon.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(active_carbon.c*data$active_carbon ~ data$active_carbon), col = "red")}
par(op)
own_theme <- theme_bw(base_size = 11) +
theme(rect = element_blank(),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
axis.line = element_line(color = "black"),
panel.grid.minor = element_blank())
pred_ppt <- ggpredict(m1, terms = c("ppt.cm", "soil_texture_clay[20]"))
library(tidyverse)
library(ggplot2)
library(dplyr)
library(corrplot)
library(emmeans)
library(ggeffects)
install.packages(c("emmeans", "ggeffects"))
ibrary(emmeans)
library(emmeans)
library(nlme)
library(ggeffects)
own_theme <- theme_bw(base_size = 11) +
theme(rect = element_blank(),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
axis.line = element_line(color = "black"),
panel.grid.minor = element_blank())
pred_ppt <- ggpredict(m1, terms = c("ppt.cm", "soil_texture_clay[20]"))
mgMAOM_ppt <-data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_ppt, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_x_continuous(expression("mg C in MAOM per g soil"))+
scale_y_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma)
mgMAOM_ppt
