tmeanC+aggregate_stability*ppt.cm+aggregate_stability*tmeanC+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
library(tidyverse)
library(ggplot2)
library(dplyr)
library(corrplot)
library(nlme)
library(ggeffects)
library(emmeans)
data <- read.csv(file="fracData2.csv", header=TRUE, sep=",")
missing_ph <- subset(data, is.na(ph) | ph == "")
missing_field_codes <- missing_ph$Field_Code
print(missing_field_codes)
missing_ppt <- subset(data, is.na(ppt.cm) | ppt.cm == "")
missing_field_codes <- missing_ppt$Field_Code
print(missing_field_codes)
m1=gls(mgCpergSoilM~ppt.cm*soil_texture_clay+
soil_texture_clay*tmeanC+ppt.cm*tmeanC+aggregate_stability*soil_texture_clay+aggregate_stability*ppt.cm+aggregate_stability*tmeanC+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
summary(m1)
anova(m1)
library(dplyr)
data <- data %>%
mutate(propM = gCarbonM/(gCarbonM+ gCarbonP))
summary(data$propM)
library(gtools)
data <- data %>%
dplyr::mutate(logitpropM = logit(propM))
hist(data$logitpropM)
m1M=gls(logitpropM~ppt.cm*tmeanC+ ppt.cm*soil_texture_clay +soil_texture_clay*
tmeanC+aggregate_stability*ppt.cm+ aggregate_stability*soil_texture_clay +aggregate_stability*tmeanC+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
summary(m1M)
anova(m1M)
m1P=gls(mgCpergSoilP~ppt.cm*soil_texture_clay+
soil_texture_clay*tmeanC+ppt.cm*tmeanC+aggregate_stability*soil_texture_clay+aggregate_stability*ppt.cm+aggregate_stability*tmeanC+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
summary(m1P)
anova(m1P)
mType=aov(mgperSoilM~Type.x, data=data, na.action=na.exclude)
mType=aov(mgCpergSoilM~Type.x, data=data, na.action=na.exclude)
summary(mType)
TukeyHSD(mType)
F_Final <- fitted(m1)
R_Final <- residuals(m1, type = "pearson", scaled = TRUE)
N = !is.na(data$mgCpergSoilM)
Rfull <- NA
Rfull[N] <- R_Final
op <- par(mfrow = c(2,2), mar = c(5,4,1,1))  #I can't figure this part out
plot(F_Final, R_Final)
hist(Rfull)
plot(Rfull ~ data$aggregate_stability)
plot(Rfull ~ data$soil_texture_clay)
plot(Rfull ~ data$active_carbon)
plot(Rfull ~ data$tmeanC)
plot(Rfull ~ data$ppt.cm)
plot(Rfull ~ data$ph)
par(op)
op <- par(mfrow = c(2,2), mar = c(5,4,1,1)) #this makes it so all the graphs are plotted in the same window (a 2 x 2 grid)
ppt.cm.c <- summary(m1)$coefficients[2] #predictor coefficient
ppt.cm.pr <- Rfull + ppt.cm.c*data$ppt.cm  #Residuals + pred coef * predictor value
{scatter.smooth(data$ppt.cm, ppt.cm.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(ppt.cm.c*data$ppt.cm ~ data$ppt.cm), col = "red")}
soil_texture_clay.c <- summary(m1)$coefficients[3] #predictor coefficient
soil_texture_clay.pr <- Rfull + soil_texture_clay.c*data$soil_texture_clay  #Residuals + pred coef * predictor value
{scatter.smooth(data$soil_texture_clay, soil_texture_clay.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(soil_texture_clay.c*data$soil_texture_clay ~ data$soil_texture_clay), col = "red")}
aggregate_stability.c <- summary(m1)$coefficients[5] #predictor coefficient
aggregate_stability.pr <- Rfull + aggregate_stability.c*data$aggregate_stability  #Residuals + pred coef * predictor value
{scatter.smooth(data$aggregate_stability, aggregate_stability.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(aggregate_stability.c*data$aggregate_stability ~ data$aggregate_stability), col = "red")}
active_carbon.c <- summary(m1)$coefficients[6] #predictor coefficient
active_carbon.pr <- Rfull + active_carbon.c*data$active_carbon  #Residuals + pred coef * predictor value
{scatter.smooth(data$active_carbon, active_carbon.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(active_carbon.c*data$active_carbon ~ data$active_carbon), col = "red")}
tmeanC.c <- summary(m1)$coefficients[6] #predictor coefficient
tmeanC.pr <- Rfull + tmeanC.c*data$tmeanC  #Residuals + pred coef * predictor value
{scatter.smooth(data$tmeanC, tmeanC.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(tmeanC.c*data$tmeanC ~ data$tmeanC), col = "red")}
par(op)
#own_theme below sets ggplot parameters for how plots should look.
own_theme <- theme_bw(base_size = 11) +
theme(rect = element_blank(),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
axis.line = element_line(color = "black"),
panel.grid.minor = element_blank())
mgMAOM_ppt <-data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_ppt, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in MAOM per g soil"))+
scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma)
mgMAOM_ppt
pred_aggregate_stability <- ggpredict(m1, terms = c("aggregate_stability", "soil_texture_clay[20]"))
>>>>>>> Stashed changes
pred_soil_texture_clay <- ggpredict(m1, terms = c("soil_texture_clay"))
mgMAOM_soil_texture_clay <-data %>%
ggplot() +
geom_point(aes(x = soil_texture_clay, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_soil_texture_clay, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in MAOM per g soil"))+
scale_x_continuous(expression("clay"),
label = scales::comma)
mgMAOM_soil_texture_clay
pred_active_carbon <- ggpredict(m1, terms = c("active_carbon"))
mgMAOM_active_carbon <-data %>%
ggplot() +
geom_point(aes(x = active_carbon, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_active_carbon, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in MAOM per g soil"))+
scale_x_continuous(expression("active_carbon"),
label = scales::comma)
mgMAOM_active_carbon
gplot() +
geom_point(aes(x = aggregate_stability, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in MAOM per g soil"))+
scale_x_continuous(expression("aggregate_stability"),
label = scales::comma)
pred_aggregate_stability <- ggpredict(m1, terms = c("aggregate_stability"))
mgMAOM_aggregate_stability <-data %>%
ggplot() +
geom_point(aes(x = aggregate_stability, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in MAOM per g soil"))+
scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma)
mgMAOM_aggregate_stability
pred_aggregate_stability <- ggpredict(m1, terms = c("aggregate_stability"))
mgMAOM_aggregate_stability <-data %>%
ggplot() +
geom_point(aes(x = aggregate_stability, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in MAOM per g soil"))+
scale_x_continuous(expression("Aggregate Stability"),
label = scales::comma)
mgMAOM_aggregate_stability
own_theme <- theme_bw(base_size = 11) +
theme(rect = element_blank(),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
axis.line = element_line(color = "black"),
panel.grid.minor = element_blank())
pred_tmeanC <- ggpredict(m1M, terms = c("tmeanC"))
propMAOM_tmeanC <-data %>%
ggplot() +
geom_point(aes(x = tmeanC, y = logitpropM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_tmeanC, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("logit prop C in MAOM"))+
scale_x_continuous(expression("Mean Annual Temperature (C)"),
label = scales::comma)
propMAOM_tmeanC
pred_ppt <- ggpredict(m1M, terms = c("ppt.cm"))
propMAOM_ppt <-data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = propM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_ppt, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("prop C in MAOM"))+
scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma)
propMAOM_ppt
pred_aggregate_stability <- ggpredict(m1M, terms = c("aggregate_stability"))
propMAOM_aggregate_stability <-data %>%
ggplot() +
geom_point(aes(x = aggregate_stability, y = propM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("prop C in MAOM"))+
scale_x_continuous(expression("aggregate_stability"),
label = scales::comma)
propMAOM_aggregate_stability
own_theme <- theme_bw(base_size = 11) +
theme(rect = element_blank(),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
axis.line = element_line(color = "black"),
panel.grid.minor = element_blank())
pred_pptC <- ggpredict(m1P, terms = c("ppt.cm", "tmeanC[6.8,7.5]"))
pred_pptC$tmean_group <- pred_pptC$group
levels(pred_pptC$tmean_group) <- c("low (4.5-7.2)",
"high (7.2-8.6)")
data <- data %>%
drop_na(tmeanC) %>%
dplyr::mutate(tmean_group = cut(tmeanC, breaks = c(4.5,7.2,8.6)))
levels(data$tmean_group) <- c("low (4.5-7.2)",
"high (7.2-8.6)")
mgPOM_pptC <-data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = mgCpergSoilP, col = tmean_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_pptC, mapping = aes(x=x, y=predicted, col = tmean_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil")) +
scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
mgPOM_pptC
pred_tmeanC <- ggpredict(m1P, terms = c("tmeanC","ppt.cm[101,110]"))
plot(pred_tmeanC, show_data = TRUE, dot_alpha = 0.8, alpha = 0.3, limit_range = TRUE)
pred_tmeanC$ppt_group <- pred_tmeanC$group
levels(pred_tmeanC$ppt_group) <- c("low (92-104)",
"high (104-142)")
data <- data %>%
drop_na(ppt.cm) %>%
dplyr::mutate(ppt_group = cut(ppt.cm, breaks = c(92,104,142)))
levels(data$ppt_group) <- c("low (92-104)",
"high (104-142)")
mgPOM_tmeanC <-data %>%
ggplot() +
geom_point(aes(x = tmeanC, y = mgCpergSoilP, col = ppt_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_tmeanC, mapping = aes(x=x, y=predicted, col = ppt_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil")) +
scale_x_continuous(expression("Mean Annual Temperature (C)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "black")) # adjust colors if needed
mgPOM_tmeanC
pred_aggregate_stability <- ggpredict(m1P, terms = c("aggregate_stability"))
mgPOM_aggregate_stability <-data %>%
ggplot() +
geom_point(aes(x = aggregate_stability, y = mgCpergSoilP), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil"))+
scale_x_continuous(expression("aggregate stability"),
label = scales::comma)
mgPOM_aggregate_stability
mgPOM_tmeanC <-data %>%
ggplot() +
geom_point(aes(x = tmeanC, y = mgCpergSoilP, col = ppt_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_tmeanC, mapping = aes(x=x, y=predicted, col = ppt_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil")) +
scale_x_continuous(expression("Mean Annual Temperature (C)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "black")) # adjust colors if needed
mgPOM_tmeanC
pred_active_carbon <- ggpredict(m1P, terms = c("active_carbon"))
mgPOM_active_carbon <-data %>%
ggplot() +
geom_point(aes(x = active_carbon, y = mgCpergSoilP), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_active_carbon, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil"))+
scale_x_continuous(expression("active carbon"),
label = scales::comma)
mgPOM_active_carbon
pred_aggregate_stability <- ggpredict(m1P, terms = c("aggregate_stability"))
mgPOM_aggregate_stability <-data %>%
ggplot() +
geom_point(aes(x = aggregate_stability, y = mgCpergSoilP), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil"))+
scale_x_continuous(expression("aggregate stability"),
label = scales::comma)
mgPOM_aggregate_stability
pred_soil_texture_clay <- ggpredict(m1P, terms = c("soil_texture_clay "))
mgPOM_soil_texture_clay  <-data %>%
ggplot() +
geom_point(aes(x = soil_texture_clay , y = mgCpergSoilP), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_soil_texture_clay , mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil"))+
scale_x_continuous(expression("clay"),
label = scales::comma)
mgPOM_soil_texture_clay
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
library(ranger)
library(skimr)
library(iml)
library(tidyverse)
fracData <- read.csv(file="fracData.csv", header=TRUE, sep=",")
str(fracData)
# create a new dataframe with more variables for the rf predictor (mgCpergSoilM)
fracData_rmALLgM<- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, mgCpergSoilM) %>%
#remove the rows with ~25ish missing data
drop_na()
#create a new dataframe with more variables for the rf predictor (propM)
fracData_rmALLpm <- fracData %>%
mutate(
organicNew = case_when(
organic == 0 ~ "NotOrganic",
organic== 1 ~ "Organic",
TRUE~"Other")) %>%
select(organicNew,active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, propM) %>%
#remove the rows with ~25ish missing data
drop_na()
# create a new dataframe with more variables for the rf predictor (mgCpergSoilP)
fracData_rmALLgP<- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, mgCpergSoilP) %>%
#remove the rows with ~25ish missing data
drop_na()
# create a new dataframe with only a couple variables (mgCpergSoilM)
fracData_soilhealthM <- fracData %>%
select (overall.score, mgCpergSoilM) %>%
#remove the rows with ~25ish missing data
drop_na()
view(fracData_soilhealthM)
# create a new dataframe with only a couple variables (propM)
fracData_soilhealthpropM <- fracData %>%
select(overall.score, propM) %>%
#remove the rows with ~25ish missing data
drop_na()
view(fracData_soilhealthpropM)
# create a new dataframe with only a couple variables (mgCpergSoilP)
fracData_soilhealthP <- fracData %>%
select(overall.score, mgCpergSoilP) %>%
#remove the rows with ~25ish missing data
drop_na()
view(fracData_soilhealthP)
fracData_soilhealthpropM <- fracData %>%
select(overall.score, logitpropM) %>%
#remove the rows with ~25ish missing data
drop_na()
##call in the analytical data
fracData <- read.csv(file="fracData.csv", header=TRUE, sep=",")
fracData_rmALLpm <- fracData %>%
mutate(
organicNew = case_when(
organic == 0 ~ "NotOrganic",
organic== 1 ~ "Organic",
TRUE~"Other")) %>%
select(organicNew,active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, logitpropM) %>%
#remove the rows with ~25ish missing data
drop_na()
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
data <- read.csv("data.csv")
missing_ph <- subset(data, is.na(ph) | ph == "")
missing_field_codes <- missing_ph$Field_Code
print(missing_field_codes)
Frac <- read.csv(file="Frac.csv", header=TRUE, sep=",")
Loc <- read.csv(file="Location.csv", header=TRUE, sep=",")
Mang <- read.csv(file="Mang.csv", header=TRUE, sep=",")
Master2 <- read.csv(file="Master2.csv", header=TRUE, sep=",", fileEncoding="latin1")
PRISM2annual <- read.csv(file="PRISM2annual.csv", header=TRUE, sep=",")
fracData2<-Frac %>%
left_join(.,Master2,by=c("Field_Code", "soil_texture_class"))
write.csv(fracData2, file = "C:/Users/F004SPC/Documents/GitHub/FracFarmVT/fracData2.csv", row.names = FALSE)
data <- read.csv(file="fracData2.csv", header=TRUE, sep=",")
missing_ph <- subset(data, is.na(ph) | ph == "")
missing_field_codes <- missing_ph$Field_Code
print(missing_field_codes)
fracData2<-Frac %>%
left_join(.,Master2,by=c("Field_Code", "soil_texture_class"))
fracData2<-Frac
left_join(.,Master2,by=c("Field_Code", "soil_texture_class"))
library(tidyverse)
library(ggplot2)
library(dplyr)
library(corrplot)
library(nlme)
library(ggeffects)
library(emmeans)
fracData2<-Frac
left_join(.,Master2,by=c("Field_Code", "soil_texture_class"))
fracData2<-Frac %>%
left_join(.,Master2,by=c("Field_Code", "soil_texture_class"))
fracData2<-fracData2 %>%
left_join(.,Mang,by="Field_Code")
fracData2<-fracData2 %>%
left_join(.,PRISM2annual,by="Field_Code")
names(fracData2)
write.csv(fracData2, file = "C:/Users/F004SPC/Documents/GitHub/FracFarmVT/fracData2.csv", row.names = FALSE)
data <- read.csv(file="fracData2.csv", header=TRUE, sep=",")
missing_ph <- subset(data, is.na(ph) | ph == "")
missing_field_codes <- missing_ph$Field_Code
print(missing_field_codes)
Frac <- read.csv(file="Frac.csv", header=TRUE, sep=",")
Loc <- read.csv(file="Location.csv", header=TRUE, sep=",")
Mang <- read.csv(file="Mang.csv", header=TRUE, sep=",")
Master2 <- read.csv(file="Master2.csv", header=TRUE, sep=",", fileEncoding="latin1")
PRISM2annual <- read.csv(file="PRISM2annual.csv", header=TRUE, sep=",")
fracData2<-Frac %>%
left_join(.,Master2,by=c("Field_Code", "soil_texture_class"))
fracData2<-fracData2 %>%
left_join(.,Mang,by="Field_Code")
fracData2<-fracData2 %>%
left_join(.,PRISM2annual,by="Field_Code")
names(fracData2)
write.csv(fracData2, file = "C:/Users/F004SPC/Documents/GitHub/FracFarmVT/fracData2.csv", row.names = FALSE)
data <- read.csv(file="fracData2.csv", header=TRUE, sep=",")
missing_ph <- subset(data, is.na(ph) | ph == "")
missing_field_codes <- missing_ph$Field_Code
print(missing_field_codes)
Frac <- read.csv(file="Frac.csv", header=TRUE, sep=",")
Loc <- read.csv(file="Location.csv", header=TRUE, sep=",")
Mang <- read.csv(file="Mang.csv", header=TRUE, sep=",")
Master2 <- read.csv(file="Master2.csv", header=TRUE, sep=",", fileEncoding="latin1")
PRISM2annual <- read.csv(file="PRISM2annual.csv", header=TRUE, sep=",")
fracData2<-Frac %>%
left_join(.,Master2,by=c("Field_Code", "soil_texture_class"))
fracData2<-fracData2 %>%
left_join(.,Mang,by="Field_Code")
fracData2<-fracData2 %>%
left_join(.,PRISM2annual,by="Field_Code")
write.csv(fracData2, file = "C:/Users/F004SPC/Documents/GitHub/FracFarmVT/fracData2.csv", row.names = FALSE)
data <- read.csv(file="fracData2.csv", header=TRUE, sep=",")
missing_ph <- subset(data, is.na(ph) | ph == "")
missing_field_codes <- missing_ph$Field_Code
print(missing_field_codes)
fracData2<-Frac %>%
left_join(.,Master2,by=c("Field_Code", "soil_texture_class"))
fracData2<-fracData2 %>%
left_join(.,Mang,by="Field_Code")
fracData2<-fracData2 %>%
left_join(.,PRISM2annual,by="Field_Code")
names(fracData2)
write.csv(fracData2, file = "C:/Users/F004SPC/Documents/GitHub/FracFarmVT/fracData2.csv", row.names = FALSE)
data <- read.csv(file="fracData2.csv", header=TRUE, sep=",")
missing_ph <- subset(data, is.na(ph) | ph == "")
missing_field_codes <- missing_ph$Field_Code
print(missing_field_codes)
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
library(tidyverse)
library(ggplot2)
library(dplyr)
library(corrplot)
library(nlme)
library(ggeffects)
library(emmeans)
Frac <- read.csv(file="Frac.csv", header=TRUE, sep=",")
Loc <- read.csv(file="Location.csv", header=TRUE, sep=",")
Mang <- read.csv(file="Mang.csv", header=TRUE, sep=",")
Master2 <- read.csv(file="Master2.csv", header=TRUE, sep=",", fileEncoding="latin1")
PRISM2annual <- read.csv(file="PRISM2annual.csv", header=TRUE, sep=",")
fracData2<-Frac %>%
left_join(.,Master2,by=c("Field_Code", "soil_texture_class"))
fracData2<-fracData2 %>%
left_join(.,Mang,by="Field_Code")
fracData2<-fracData2 %>%
left_join(.,PRISM2annual,by="Field_Code")
names(fracData2)
write.csv(fracData2, file = "C:/Users/F004SPC/Documents/GitHub/FracFarmVT/fracData2.csv", row.names = FALSE)
data <- read.csv(file="fracData2.csv", header=TRUE, sep=",")
missing_ph <- subset(data, is.na(ph) | ph == "")
missing_field_codes <- missing_ph$Field_Code
print(missing_field_codes)
missing_mgCpergSoilM <- subset(data, is.na(mgCpergSoilM) | mgCpergSoilM == "")
missing_field_codes <- missing_mgCpergSoilM$Field_Code
print(missing_field_codes)
missing_ppt <- subset(data, is.na(ppt.cm) | ppt.cm == "")
missing_field_codes <- missing_ppt$Field_Code
print(missing_field_codes)
