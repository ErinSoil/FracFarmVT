RFtestprop$variable.importance
RFtestpropM2 <- ranger(propM ~ ., data = fracData, importance = "permutation")
RFtestpropM2 <- ranger(propM ~ ., data = fracData_rm, importance = "permutation")
fracData_noNA <- fracData %>%
select_if(is.numeric)  %>%
drop_na()
View(fracData_noNA)
fracData_noNA <- fracData %>%
drop_na()
View(fracData_noNA)
fracData_rm <- fracData %>%
select(active_carbon,ph,ppt.cm, mgCpergSoilP, Type.x) %>% #remove the rows with ~25ish missing data
drop_na()
#run with more variables
RFtest1 <- ranger(mgCpergSoilM ~ ., data = fracData_rm, importance = "permutation")
fracData_rmALL <- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_sand, soil_texture_silt, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, mgCpergSoilM) %>%
#remove the rows with ~25ish missing data
drop_na()
View(fracData_rmALL)
#run with more variables
RFtest1 <- ranger(mgCpergSoilM ~ ., data = fracData_rmALL, importance = "permutation")
RFtest1$variable.importance
# create a new dataframe with more variables for the rf
fracData_rmALL <- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_sand, soil_texture_silt, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, mgCpergSoilP) %>%
#remove the rows with ~25ish missing data
drop_na()
RFtest2 <- ranger(mgCpergSoilP ~ ., data = fracData_rmALL, importance = "permutation")
RFtest2$variable.importance
fracData_rmALL <- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, propM) %>%
#remove the rows with ~25ish missing data
drop_na()
RFtestpropM2 <- ranger(propM ~ ., data = fracData_rm, importance = "permutation")
RFtestpropM2 <- ranger(propM ~ ., data = fracData_rmALL, importance = "permutation")
RFtestpropM2$variable.importance
# create a new dataframe with more variables for the rf propM
fracData_rmALLpm <- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, propM) %>%
#remove the rows with ~25ish missing data
drop_na()
# create a new dataframe with more variables for the rf mgCpergSoilM
fracData_rmALLgM<- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, mgCpergSoilM) %>%
#remove the rows with ~25ish missing data
drop_na()
# create a new dataframe with more variables for the rf mgCpergSoilP
fracData_rmALLgP<- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, mgCpergSoilP) %>%
#remove the rows with ~25ish missing data
drop_na()
#remove the rows with ~25ish missing data
drop_na()
RFtest1 <- ranger(mgCpergSoilM ~ ., data = fracData_rmALLgM, importance = "permutation")
RFtest1$variable.importance
RFtest2 <- ranger(mgCpergSoilP ~ ., data = fracData_rmALLgP, importance = "permutation")
RFtest2$variable.importance
RFtest3 <- ranger(propM ~ ., data = fracData_rmALLpm, importance = "permutation")
RFtest3$variable.importance
model_data_1 <- Predictor$new(RFtest1, data = fracData_rmALL %>%
dplyr::select(-propM))
view(fracDataNum)
fracDataNum <- fracData
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
##call in the analytical data
fracData <- read.csv(file="fracData.csv", header=TRUE, sep=",")
fracDataNum <- fracData
select_if(is.numeric)
View(fracDataNum)
model_data_1 <- Predictor$new(RFtest1, data =  fracData_rmALLgM %>%
dplyr::select(-mgCpergSoilM))
fracData_soilhealthP <- fracDataNum %>%
select(overall.score, mgCpergSoilP) %>%
#remove the rows with ~25ish missing data
drop_na()
racData_soilhealthM <- fracData %>%
select(overall.score, mgCpergSoilM) %>%
#remove the rows with ~25ish missing data
drop_na()
fracData_soilhealthM <- fracData %>%
select(overall.score, mgCpergSoilM) %>%
#remove the rows with ~25ish missing data
drop_na()
##call in the analytical data
fracData <- read.csv(file="fracData.csv", header=TRUE, sep=",")
View(fracData)
#remove the columns with limited data
fracData_rm <- fracData %>%
select(#list all the columns I want to keep with commas, no ") %>%
#remove the rows with ~25ish missing data
drop_na()
View(fracDataNum)
View(fracDataNum)
View(fracDataNum)
fracData_rm <- fracData %>%
select(active_carbon,ph,ppt.cm, mgCpergSoilP, Type.x) %>% #remove the rows with ~25ish missing data
drop_na()
fracData_rm <- fracData %>%
select(#list all the columns I want to keep with commas, no ") %>%
#remove the rows with ~25ish missing data
drop_na()
fracData_rm <- fracData %>%
fracData_rmALLpm <- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, propM) %>%
#remove the rows with ~25ish missing data
drop_na()
str(fracData)
#Create a new dataframe with more variables for the rf propM
fracData_rmALLpm <- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, propM) %>%
#remove the rows with ~25ish missing data
drop_na()
fracData_rmALLpm <- fracData
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, propM) %>%
#remove the rows with ~25ish missing data
drop_na()
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, propM)
fracData_rmALLpm <- fracData
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, propM)
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
str(fracData)
fracData_rmALLgM<- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, mgCpergSoilM) %>%
#remove the rows with ~25ish missing data
drop_na()
str(fracData)
##call in the analytical data
fracData <- read.csv(file="fracData.csv", header=TRUE, sep=",")
str(fracData)
fracData_rmALLgM<- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, mgCpergSoilM) %>%
#remove the rows with ~25ish missing data
drop_na()
#load library
library(ranger)
library(skimr)
library(iml)
library(tidyverse)
# create a new dataframe with more variables for the rf predictor (mgCpergSoilM)
fracData_rmALLgM<- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, mgCpergSoilM) %>%
#remove the rows with ~25ish missing data
drop_na()
#create a new dataframe with more variables for the rf predictor (propM)
fracData_rmALLpm <- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, propM) %>%
#remove the rows with ~25ish missing data
drop_na()
# create a new dataframe with more variables for the rf predictor (mgCpergSoilP)
fracData_rmALLgP<- fracData %>%
select(active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, mgCpergSoilP) %>%
#remove the rows with ~25ish missing data
drop_na()
# create a new dataframe with only a couple variables (mgCpergSoilM)
fracData_soilhealthM <- fracData %>%
select (overall.score, mgCpergSoilM) %>%
#remove the rows with ~25ish missing data
drop_na()
view(fracData_soilhealthM)
# create a new dataframe with only a couple variables (propM)
fracData_soilhealthpropM <- fracData %>%
select(overall.score, propM) %>%
#remove the rows with ~25ish missing data
drop_na()
view(fracData_soilhealthpropM)
# create a new dataframe with only a couple variables (mgCpergSoilP)
fracData_soilhealthP <- fracData %>%
select(overall.score, mgCpergSoilP) %>%
#remove the rows with ~25ish missing data
drop_na()
view(fracData_soilhealthP)
RFtestSHM <- ranger(mgCpergSoilM ~ ., data = fracData_soilhealthM, importance = "permutation")
RFtestSHM$variable.importance
RFtestSHprop <- ranger(propM ~ ., data = fracData_soilhealthpropM, importance = "permutation")
RFtestSHprop$variable.importance
#negative relationship with Prop M and soil health. Interesting
RFtestSHP <- ranger(mgCpergSoilP ~ ., data = fracData_soilhealthP, importance = "permutation")
RFtestSHP$variable.importance
RFtestM <- ranger(mgCpergSoilM ~ ., data = fracData_rmALLgM, importance = "permutation")
RFtestM$variable.importance
RFtestP <- ranger(mgCpergSoilP ~ ., data = fracData_rmALLgP, importance = "permutation")
RFtestP$variable.importance
RFtestprop <- ranger(propM ~ ., data = fracData_rmALLpm, importance = "permutation")
RFtestprop$variable.importance
#create partial dependance plots for mgCpergSoil(MAOM)
model_data_1 <- Predictor$new(RFtestM, data =  fracData_rmALLgM %>%
dplyr::select(-mgCpergSoilM))
pdp_all <- FeatureEffects$new(model_data_1, method = "pdp")
plot(pdp_all)
#create partial dependance plots for mgCpergSoil(POM)
model_data_1 <- Predictor$new(RFtestP, data =  fracData_rmALLgP %>%
dplyr::select(-mgCpergSoilP))
pdp_all <- FeatureEffects$new(model_data_1, method = "pdp")
plot(pdp_all)
#create partial dependance plots for PropMAOM
model_data_1 <- Predictor$new(RFtestprop, data = fracData_rmALL %>%
dplyr::select(-propM))
model_data_1 <- Predictor$new(RFtestprop, data = fracData_rmALLprop %>%
dplyr::select(-propM))
model_data_1 <- Predictor$new(RFtestprop, data = fracData_rmALLpm %>%
dplyr::select(-propM))
pdp_all <- FeatureEffects$new(model_data_1, method = "pdp")
plot(pdp_all)
model_data_M <- Predictor$new(RFtestM, data =  fracData_rmALLgM %>%
dplyr::select(-mgCpergSoilM))
pdp_M <- FeatureEffects$new(model_data_M, method = "pdp")
plot(pdp_M)
model_data_M <- Predictor$new(RFtestM, data =  fracData_rmALLgM %>%
dplyr::select(-mgCpergSoilM))
pdp_M <- FeatureEffects$new(model_data_M, method = "pdp")
plot(pdp_M)+
ggtitle("mgCpergSoilM")
plot(pdp_M)+
scale_y_countinous("mgCpergSoilM")
plot(pdp_M)+
scale_y_continous("mgCpergSoilM")
plot(pdp_M)+
scale_y_continuous("mgCpergSoilM")
model_data_P <- Predictor$new(RFtestP, data =  fracData_rmALLgP %>%
dplyr::select(-mgCpergSoilP))
pdp_P <- FeatureEffects$new(model_data_P, method = "pdp")
plot(pdp_P)+
ggtitle("mgCpergSoilP")
model_data_1 <- Predictor$new(RFtestprop, data = fracData_rmALLpm %>%
dplyr::select(-propM))
pdp_all <- FeatureEffects$new(model_data_1, method = "pdp")
plot(pdp_all)+
ggtitle("propM")
model_data_SHM <- Predictor$new(RFtestSHM, data =  fracData_soilhealthM%>%
dplyr::select(-mgCpergSoilM))
model_data_SHM <- Predictor$new(RFtestSHM, data =  fracData_soilhealthM%>%
dplyr::select(-mgCpergSoilM))
model_data_SHM <- Predictor$new(RFtestSHM, data =  fracData_soilhealthM%>%
dplyr::select(-mgCpergSoilM))
str(fracData)
fracData %<%
mutate(
organicNew = case_when(
organic == 0 ~ "NotOrganic",
organic== 1 ~ "Organic",
TRUE~"Other"))
fracData %>%
mutate(
organicNew = case_when(
organic == 0 ~ "NotOrganic",
organic== 1 ~ "Organic",
TRUE~"Other"))
fracData_rmALLpm <- fracData %>%
mutate(
organicNew = case_when(
organic == 0 ~ "NotOrganic",
organic== 1 ~ "Organic",
TRUE~"Other")) %>%
select(organicNew,active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, organic_matter, aggregate_stability, pred_water_capacity, propM) %>%
#remove the rows with ~25ish missing data
drop_na()
RFtestprop <- ranger(propM ~ ., data = fracData_rmALLpm, importance = "permutation")
RFtestprop$variable.importance
model_data_propM <- Predictor$new(RFtestprop, data = fracData_rmALLpm %>%
dplyr::select(-propM))
pdp_propM <- FeatureEffects$new(model_data_propM, method = "pdp")
plot(pdp_propM)+
ggtitle("propM")
model_data_P <- Predictor$new(RFtestP, data =  fracData_rmALLgP %>%
dplyr::select(-mgCpergSoilP))
pdp_P <- FeatureEffects$new(model_data_P, method = "pdp")
plot(pdp_P)+
ggtitle("mgCpergSoilP")
fracData %>%
ggplot(aes(x = k, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = mg, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = fe, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = fe, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = k, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = mn, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = k, y = mgCpergSoilP)) +
geom_point()
fracData %>%
ggplot(aes(x = k, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = zn, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = miner_element_rating, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = minor_element_rating, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = minor_element_rating, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = minor_elements_rating, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = p, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = ph, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = active_carbon, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = active_carbon, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = respiration, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = respiration, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = ace_soil_protein_index, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = ace_soil_protein_index_rating, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = total_c, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = total_c, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = soc, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = water_capacity, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = soil_texture_sand, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = soil_texture_silt, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Yields, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Yields, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = Plants, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Type.x, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Plants, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = croprotation, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = CropLastYr, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = CropThisYr, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = CropLastYr, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = animal, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = years.since.till, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = cutshay, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = till.passes, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = till.depth, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Tillage_1to4, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Organic.matter.additions, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Soil.amendments, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = plastic.mulch, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = herbicides, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = insecticides, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = treated.seed, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = organic, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = irrigation, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Pattern.Drainage.Tile, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = OM30, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = OM30, y = propM)) +
geom_point()
fracData %>%
ggplot(aes(x = BD30, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = surface_hardness, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Mod..Morgan.Al..ppm, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Mod..Morgan.Ca..ppm, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Mod..Morgan.Cu..ppm, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Mod..Morgan.S..ppm, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Mod..Morgan.B..ppm, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = CN_ratio, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Elevation..ft., y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Latitude, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = Longitude, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = ppt.cm, y = mgCpergSoilM)) +
geom_point()
fracData %>%
ggplot(aes(x = tmeanC, y = mgCpergSoilM)) +
geom_point()
RFtestAgSt <- ranger(aggregate_stability ~ ., data = fracData_rmALLgM, importance = "permutation")
RFtestAgSt$variable.importance
plot(pdp_AgSt)+
ggtitle("AggregateStability")
model_data_AgSt <- Predictor$new(RFtestAgSt, data = fracData_rmALLgM %>%
dplyr::select(-aggregate_stability))
pdp_AgSt <- FeatureEffects$new(model_data_AgSt, method = "pdp")
plot(pdp_AgSt)+
ggtitle("AggregateStability")
fracData_rmALLC<- fracData %>%
select(total_C,active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, aggregate_stability, pred_water_capacity, mgCpergSoilP) %>%
#remove the rows with ~25ish missing data
drop_na()
fracData_rmALLC<- fracData %>%
select(total_c,active_carbon,ph,ppt.cm,tmeanC,overall.score, soil_texture_clay, aggregate_stability, pred_water_capacity, mgCpergSoilP) %>%
#remove the rows with ~25ish missing data
drop_na()
RFtestC <- ranger(total_c ~ ., data = fracData_rmALLC, importance = "permutation")
RFtestC$variable.importance
model_data_C <- Predictor$new(RFtestC, data = fracData_rmALLC %>%
dplyr::select(-total_c))
pdp_C <- FeatureEffects$new(model_data_AgSt, method = "pdp")
plot(pdp_C)+
ggtitle("TotalCarbon")
RFtestSHM <- ranger(mgCpergSoilM ~ ., data = fracData_soilhealthM, importance = "permutation")
RFtestSHM$variable.importance
RFtestSHprop <- ranger(propM ~ ., data = fracData_soilhealthpropM, importance = "permutation")
RFtestSHprop$variable.importance
#negative relationship with Prop M and soil health. Interesting
RFtestSHP <- ranger(mgCpergSoilP ~ ., data = fracData_soilhealthP, importance = "permutation")
RFtestSHP$variable.importance
#run with more variables #change the dataset fracData_rmALL to include dependent variable each time
RFtestM <- ranger(mgCpergSoilM ~ ., data = fracData_rmALLgM, importance = "permutation")
RFtestM$variable.importance
RFtestP <- ranger(mgCpergSoilP ~ ., data = fracData_rmALLgP, importance = "permutation")
RFtestP$variable.importance
RFtestprop <- ranger(propM ~ ., data = fracData_rmALLpm, importance = "permutation")
RFtestprop$variable.importance
model_data_M <- Predictor$new(RFtestM, data =  fracData_rmALLgM %>%
dplyr::select(-mgCpergSoilM))
pdp_M <- FeatureEffects$new(model_data_M, method = "pdp")
plot(pdp_M)+
ggtitle("mgCpergSoilM")
