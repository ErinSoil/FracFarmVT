# Assuming 'data' is your data frame and 'mgCpergSoilP' is the column name for POC
mean_poc <- mean(data$mgCpergSoilP, na.rm = TRUE)
# Print the mean POC value
print(paste("The mean POC is", round(mean_poc, 2), "mg"))
# Define the coefficient for aggregate stability
coef_aggregate_stability <- 0.06799  # in mg
# Define the mean value of POC (baseline POC)
mean_POC <- 8.17  # Replace with the actual mean value from your data
# Calculate the percent increase in POC for a 1% increase in aggregate stability
percent_increase_poc <- (coef_aggregate_stability / mean_POC) * 100
# Print the result
print(paste("Percent increase in POC for a 1% increase in aggregate stability is", round(percent_increase_poc, 2), "%"))
# Define the coefficient for aggregate stability
coef_aggregate_stability <- 0.06799  # in mg
# Define the mean value of POC (baseline POC)
mean_POC <- 8.17  # Replace with the actual mean value from your data
# Define the percentage increase in aggregate stability
percentage_increase <- 10  # For a 10% increase in aggregate stability
# Calculate the absolute increase in POC for the given percentage increase in aggregate stability
absolute_increase_poc <- coef_aggregate_stability * percentage_increase
# Calculate the percent increase in POC based on the mean value
percent_increase_poc <- (absolute_increase_poc / mean_POC) * 100
# Print the result
print(paste("Percent increase in POC for a", percentage_increase, "% increase in aggregate stability is", round(percent_increase_poc, 2), "%"))
# Define the coefficient for active carbon
coef_activecarbon <-  0.01317  # in mg
# Define the mean value of POC (baseline POC)
mean_POC <- 8.17  # Replace with the actual mean value from your data
# Define the ppm increase in active carbon
ppm_increase <- 100  # For a 100 ppm increase in active carbon
# Calculate the absolute increase in POC for the given ppm increase in active carbon
absolute_increase_poc <- coef_activecarbon * ppm_increase
# Calculate the percent increase in POC based on the mean value
percent_increase_poc <- (absolute_increase_poc / mean_POC) * 100
# Print the result
print(paste("Percent increase in POC for a", ppm_increase, "ppm in active carbon is", round(percent_increase_poc, 2), "%"))
# Define the coefficient for aggregate stability
coef_aggregate_stability <- 0.06799  # in mg find in model summary
# Define the mean value of POC
mean_POC <- 8.17  # Replace with the actual mean value from data
percentage_increase <- 10  #set a percentage increase of agg stability based on data
# Calculate the absolute increase in POC for the given percentage increase in aggregate stability
absolute_increase_poc <- coef_aggregate_stability * percentage_increase
# Calculate the percent increase in POC for a 1% increase in aggregate stability
Onepercent_increase_poc <- (coef_aggregate_stability / mean_POC) * 100
# Calculate the percent increase in POC based on the mean value
percent_increase_poc <- (absolute_increase_poc / mean_POC) * 100
# Print the result
print(paste("Absolute increase in POC for a 10% increase in aggregate stability is", round(absolute_increase_poc, 2), "mg"))
# Print the result
print(paste("Percent increase in POC for a 1% increase in aggregate stability is", round(Onepercent_increase_poc, 2), "%"))
# Print the result
print(paste("Percent increase in POC for a", percentage_increase, "% increase in aggregate stability is", round(percent_increase_poc, 2), "%"))
# Define the coefficient for active carbon
coef_activecarbon <-  0.01317  # in ppm
# Define the mean value of POC (baseline POC)
mean_POC <- 8.17  # Replace with the actual mean value from your data
# Define the ppm increase in active carbon
ppm_increase <- 100  # For a 100 ppm increase in active carbon
# Calculate the absolute increase in POC for the given ppm increase in active carbon
absolute_increase_poc <- coef_activecarbon * ppm_increase
# Calculate the percent increase in POC based on the mean value
percent_increase_poc <- (absolute_increase_poc / mean_POC) * 100
# Print the result
print(paste("Percent increase in POC for a", ppm_increase, "ppm in active carbon is", round(percent_increase_poc, 2), "%"))
m3 = gls(mgCpergSoilM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon + aggregate_stability,
data = data,
na.action = na.exclude,
method = "ML")
summary(m3)
#own_theme below sets ggplot parameters for how plots should look.
own_theme <- theme_bw(base_size = 11) +
theme(rect = element_blank(),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
axis.line = element_line(color = "black"),
panel.grid.minor = element_blank())
#for aggregate stability
pred_aggregate_stability <- ggpredict(m3, terms = c("aggregate_stability"))
mgMAOM_aggregate_stability <-data %>%
ggplot() +
geom_point(aes(x = aggregate_stability, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg MAOC g"^-1,"soil"))+
scale_x_continuous(expression("Aggregate Stability"),
label = scales::comma)
mgMAOM_aggregate_stability
# Print the mean MAOC value
print(paste("The mean MAOC is", round(mean_poc, 2), "mg"))
mean_maoc <- mean(data$mgCpergSoilM, na.rm = TRUE)
print(paste("The mean MAOC is", round(mean_maoc, 2), "mg"))
mean_MAOC <- 16.77  # Replace with the actual mean value from data
percentage_increase <- 10  #set a percentage increase of agg stability based on data
# Calculate the absolute increase in MAOC for the given percentage increase in aggregate stability
absolute_increase_maoc <- coef_aggregate_stability * percentage_increase
# Calculate the percent increase in POC for a 1% increase in aggregate stability
Onepercent_increase_maoc <- (coef_aggregate_stability / mean_MAOC) * 100
# Calculate the percent increase in POC based on the mean value
percent_increase_maoc <- (absolute_increase_maoc / mean_MAOC) * 100
# Print the result
print(paste("Absolute increase in MAOC for a 10% increase in aggregate stability is", round(absolute_increase_maoc, 2), "mg"))
# Print the result
print(paste("Percent increase in MAOC for a 1% increase in aggregate stability is", round(Onepercent_increase_maoc, 2), "%"))
# Print the result
print(paste("Percent increase in MAOC for a", percentage_increase, "% increase in aggregate stability is", round(percent_increase_maoc, 2), "%"))
# Define the coefficient for aggregate stability
coef_aggregate_stability <-  0.10780  # in mg find in model summary
# Calculate the absolute increase in MAOC for the given percentage increase in aggregate stability
absolute_increase_maoc <- coef_aggregate_stability * percentage_increase
# Print the result
print(paste("Absolute increase in MAOC for a 10% increase in aggregate stability is", round(absolute_increase_maoc, 2), "mg"))
print(paste("Percent increase in MAOC for a 1% increase in aggregate stability is", round(Onepercent_increase_maoc, 2), "%"))
# Print the result
# Print the result
print(paste("Percent increase in MAOC for a", percentage_increase, "% increase in aggregate stability is", round(percent_increase_maoc, 2), "%"))
#for active_carbon
pred_active_carbon <- ggpredict(m3, terms = c("active_carbon"))
mgMAOM_active_carbon <-data %>%
ggplot() +
geom_point(aes(x = active_carbon, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_active_carbon, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg MAOC g"^-1,"soil"))+
scale_x_continuous(expression("Active Carbon"),
label = scales::comma)
mgMAOM_active_carbon
ggarrange(mgMAOM_aggregate_stability,mgMAOM_active_carbon,nrow=1, common.legend=T, legend="left", labels=c("a","b"))
#for aggregate stability
pred_aggregate_stability <- ggpredict(m3, terms = c("aggregate_stability"))
mgMAOM_aggregate_stability <-data %>%
ggplot() +
geom_point(aes(x = aggregate_stability, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg MAOC g"^-1,"soil"))+
scale_x_continuous(expression("Aggregate Stability (%)"),
label = scales::comma)
mgMAOM_aggregate_stability
ggsave("mgMAOM_aggregate_stability.jpeg", width = 4, height = 3)
# Define the coefficient for aggregate stability
coef_aggregate_stability <-  0.10780  # in mg find in model summary
# Define the mean value of MAOC
# Print the mean MAOC value
mean_maoc <- mean(data$mgCpergSoilM, na.rm = TRUE)
print(paste("The mean MAOC is", round(mean_maoc, 2), "mg"))
mean_MAOC <- 16.77  # Replace with the actual mean value from data
percentage_increase <- 10  #set a percentage increase of agg stability based on data
# Calculate the absolute increase in MAOC for the given percentage increase in aggregate stability
absolute_increase_maoc <- coef_aggregate_stability * percentage_increase
# Calculate the percent increase in POC for a 1% increase in aggregate stability
Onepercent_increase_maoc <- (coef_aggregate_stability / mean_MAOC) * 100
# Calculate the percent increase in POC based on the mean value
percent_increase_maoc <- (absolute_increase_maoc / mean_MAOC) * 100
# Print the result
print(paste("Absolute increase in MAOC for a 10% increase in aggregate stability is", round(absolute_increase_maoc, 2), "mg"))
# Print the result
print(paste("Percent increase in MAOC for a 1% increase in aggregate stability is", round(Onepercent_increase_maoc, 2), "%"))
# Print the result
print(paste("Percent increase in MAOC for a", percentage_increase, "% increase in aggregate stability is", round(percent_increase_maoc, 2), "%"))
#for active_carbon
pred_active_carbon <- ggpredict(m3, terms = c("active_carbon"))
mgMAOM_active_carbon <-data %>%
ggplot() +
geom_point(aes(x = active_carbon, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_active_carbon, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg MAOC g"^-1,"soil"))+
scale_x_continuous(expression("Active Carbon (ppm)"),
label = scales::comma)
mgMAOM_active_carbon
ggsave("mgMAOM_active_carbon.jpeg", width = 4, height = 3)
#get them side by side for presentation
ggarrange(mgMAOM_aggregate_stability,mgMAOM_active_carbon,nrow=1, common.legend=T, legend="left", labels=c("a","b"))
# Assuming 'data' is your data frame and 'mgCpergSoilM' is the column name for POC
mean_maoc <- mean(data$mgCpergSoilM, na.rm = TRUE)
print(paste("The mean POC is", round(mean_maoc, 2), "mg"))
# Print the result
print(paste("Percent increase in MAOC for a", ppm_increase, "ppm in active carbon is", round(percent_increase_maoc, 2), "%"))
# Print the result
print(paste("Absolute increase in MAOC for a 100ppm increase in active carbon is", round(absolute_increase_maoc, 2), "mg"))
# Print the result
print(paste("Percent increase in MAOC for a 1% increase in actice carbon is", round(Onepercent_increase_maoc, 2), "%"))
# Create a plot with the regression line
ggplot(data, aes(x = mgCpergSoilP, y = overall.score)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Linear Regression of overall.score on mgCpergSoilP",
x = "mgC per g Soil P",
y = "Overall Score") +
theme_minimal()
#soil health regression the other way
# Perform linear regression
regression_model <- lm(overall.score ~ mgCpergSoilP, data = data)
# Summarize the regression model
summary(regression_model)
# Create a plot with the regression line
ggplot(data, aes(x = mgCpergSoilP, y = overall.score)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Linear Regression of overall.score on mgCpergSoilP",
x = "mgCpergSoilP",
y = "Overall Score") +
theme_minimal()
# Perform linear regression
regression_model <- lm(overall.score ~ logitpropM, data = data)
# Summarize the regression model
summary(regression_model)
# Create a plot with the regression line
ggplot(data, aes(x = logitpropM, y = overall.score)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Linear Regression of overall.score on logitpropM",
x = "logitpropM",
y = "Overall Score") +
theme_minimal()
# Perform linear regression
regression_model <- lm(mgCpergSoilP ~ overall.score, data = data)
# Summarize the regression model
summary(regression_model)
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Linear Regression of overall.score on mgCpergSoilP",
x = "mgC per g Soil P",
y = "Overall Score") +
theme_minimal()
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method="lm",se=F, color="black")+
labs(title = "Linear Regression of overall.score on mgCpergSoilP",
x = "mg POC g"^-1,"soil",
y = "Soil Health Index") +
theme_minimal()
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method="lm",se=F, color="black")+
labs(title = "Linear Regression of overall.score on mgCpergSoilP",
x = "Soil Health Index",
y = "mg POC g^-1 soil" +
theme_minimal()
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(title = "Linear Regression of Soil Health Index on mg POC g^-1 Soil",
x = "Soil Health Index",
y = "mg POC g^-1 Soil") +
theme_minimal()
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(title = "Linear Regression of Soil Health Index on mg POC g^-1 soil",
x = "Soil Health Index",
y = "mg POC g^-1 Soil") +
theme_minimal()
# Summarize the regression model
summary(regression_model)
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(title = "Linear Regression of Soil Health Index on mg POC g^-1 soil",
x = "Soil Health Index",
y = "mg POC g^-1 soil") +
theme_minimal()
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method="lm",se=F, color="black")+
labs(title = "Linear Regression of overall.score on mgCpergSoilP",
x = "Soil Health Index",
y = "mg POC g^-1 soil" +
theme_minimal()
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(title = "Linear Regression of Soil Health Index on mg POC g^-1 soil",
x = "Soil Health Index",
y = "mg POC g^-1 soil") +
theme_minimal()
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(title = "Linear Regression of Soil Health Index on mg POC g^-1 soil",
x = "Soil Health Index",
y = "mg POC g^-1 soil") +
theme_minimal()
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(
x = "Soil Health Index",
y = "mg POC g"^-1,"soil") +
theme_minimal()
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(
x = "Soil Health Index",
y = ""mg POC g"^-1,"soil"") +
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(
x = "Soil Health Index",
y = "mg POC g"^-1,"soil"") +
theme_minimal()
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(x = "Soil Health Index",
y = "mg POC g"^-1,"soil") +
theme_minimal()
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(x = "Soil Health Index",
y = expression("mg POC g"^-1~"soil")) +
theme_minimal()
#soil health regression
# Perform linear regression POC
regression_model_POC <- lm(mgCpergSoilP ~ overall.score, data = data)
summary(regression_model_POC)
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(x = "Soil Health Index",
y = expression("mg POC g"^-1~"soil")) +
theme_minimal()
# Perform linear regression MAOC
regression_model_MAOC <- lm(mgCpergSoilM ~ overall.score, data = data)
summary(regression_model_MAOC)
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = mgCpergSoilM)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(x = "Soil Health Index",
y = expression("mg MAOC g"^-1~"soil")) +
theme_minimal()
# Perform linear regression Prop MAOC
regression_model_PropMAOC <- lm(logitpropM ~ overall.score, data = data)
summary(regression_model_propMAOC)
# Perform linear regression Prop MAOC
regression_model_propMAOC <- lm(logitpropM ~ overall.score, data = data)
summary(regression_model_propMAOC)
# Create a plot with the regression line
ggplot(data, aes(x = overall.score, y = logitpropM)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(x = "Soil Health Index",
y = expression("Proportion of carbon as MAOC")) +
theme_minimal()
#soil health regression
# Perform linear regression POC
regression_model_POC <- lm(mgCpergSoilP ~ overall.score, data = data)
summary(regression_model_POC)
# Create a plot with the regression line
POC_health <- ggplot(data, aes(x = overall.score, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(x = "Soil Health Index",
y = expression("mg POC g"^-1~"soil")) +
theme_minimal()
# Perform linear regression MAOC
regression_model_MAOC <- lm(mgCpergSoilM ~ overall.score, data = data)
summary(regression_model_MAOC)
# Create a plot with the regression line
MAOC_health <- ggplot(data, aes(x = overall.score, y = mgCpergSoilM)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(x = "Soil Health Index",
y = expression("mg MAOC g"^-1~"soil")) +
theme_minimal()
# Perform linear regression Prop MAOC
regression_model_propMAOC <- lm(logitpropM ~ overall.score, data = data)
summary(regression_model_propMAOC)
# Create a plot with the regression line
PropM_health <- ggplot(data, aes(x = overall.score, y = logitpropM)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(x = "Soil Health Index",
y = expression("Proportion of carbon as MAOC")) +
theme_minimal()
ggarrange(POC_health, MAOC_health, PropM_health,nrow=1,ncol=3, common.legend=T, legend="left", labels=c("a","b"))
ggarrange(POC_health, MAOC_health, PropM_health,nrow=1,ncol=3, common.legend=T, legend="left", labels=c("a","b", "c"))
# Define the coefficient for aggregate stability
coef_POC <- .257  # in mg find in model summary
coef_MAOC <- .377
coef_PropM <- -.008
# Define the mean value of POC
#mean_POC <- 8.17  # Replace with the actual mean value from data
percentage_increase <- 10  #set a percentage increase of agg stability based on data
# Calculate the absolute increase in POC for the given percentage increase in aggregate stability
absolute_increase_poc <- coef_POC * percentage_increase
Print(absolute_increase_poc)
# Print the result
print(paste("Absolute increase in POC for a 10% increase in soil health index is", round(absolute_increase_poc, 2), "mg"))
# Print the result
# Define the coefficient for aggregate stability
coef_POC <- .257  # in mg find in model summary
coef_MAOC <- .377
coef_PropM <- -.008
# Define the mean value of POC
mean_POC <- 8.17  # Replace with the actual mean value from data
percentage_increase <- 10  #set a percentage increase of agg stability based on data
# Calculate the percent increase in POC for a 1% increase in aggregate stability
Onepercent_increase_poc <- (coef_POC / mean_POC) * 100
# Calculate the percent increase in POC based on the mean value
percent_increase_poc <- (absolute_increase_poc / mean_POC) * 100
print(paste("Percent increase in POC for a 1 unit increase in soil health index is", round(Onepercent_increase_poc, 2), "%"))
# Print the result
print(paste("Percent increase in POC for a", percentage_increase, "% increase in soil health is", round(percent_increase_poc, 2), "%"))
# Assuming 'data' is your data frame and 'mgCpergSoilM' is the column name for POC
mean_maoc <- mean(data$mgCpergSoilM, na.rm = TRUE)
# Assuming 'data' is your data frame and 'logitpropM' is the column name for POC
mean_propmaoc <- mean(data$logitpropM, na.rm = TRUE)
print(paste("The mean Prop MAOC is", round(mean_propmaoc, 2), "%"))
# Define the coefficient for soil health regression (slopes)
coef_POC <- .257  # in mg find in model summary
coef_MAOC <- .377
coef_PropM <- -.008
# Define the mean values for each response variable
mean_POC <- 8.17
mean_MAOC <- 16.77
mean_PropM <- .76
# Calculate the absolute increase in POC for the given percentage increase in aggregate stability
absolute_increase_poc <- coef_POC * percentage_increase
absolute_increase_maoc <- coef_MAOC * percentage_increase
absolute_increase_propmaoc <- coef_PropM * percentage_increase
# Calculate the percent increase in POC for a 1% increase in aggregate stability
Onepercent_increase_poc <- (coef_POC / mean_POC) * 100
Onepercent_increase_maoc <- (coef_MAOC / mean_MAOC) * 100
Onepercent_increase_propmaoc <- (coef_PropM / mean_propM) * 100
Onepercent_increase_propmaoc <- (coef_PropM / mean_PropM) * 100
# Calculate the percent increase in POC based on the mean value
percent_increase_poc <- (absolute_increase_poc / mean_POC) * 100
percent_increase_maoc <- (absolute_increase_maoc / mean_MAOC) * 100
percent_increase_propmaoc <- (absolute_increase_propmaoc / mean_PropM) * 100
# Print the result POC
print(paste("Absolute increase in POC for a 10 unit in soil health index is", round(absolute_increase_poc, 2), "mg"))
print(paste("Percent increase in POC for a 1 unit increase in soil health index is", round(Onepercent_increase_poc, 2), "%"))
print(paste("Percent increase in POC for a", percentage_increase, "% increase in soil health is", round(percent_increase_poc, 2), "%"))
# Print the result MAOC
print(paste("Absolute increase in MAOC for a 10 unit in soil health index is", round(absolute_increase_maoc, 2), "mg"))
print(paste("Percent increase in MAOC for a 1 unit increase in soil health index is", round(Onepercent_increase_maoc, 2), "%"))
print(paste("Percent increase in MAOC for a", percentage_increase, "% increase in soil health is", round(percent_increase_maoc, 2), "%"))
# Print the result Prop MAOC
print(paste("Absolute increase in Prop MAOC for a 10 unit in soil health index is", round(absolute_increase_propmaoc, 2), "%"))
print(paste("Percent increase in Prop MAOC for a 1 unit increase in soil health index is", round(Onepercent_increase_propmaoc, 2), "%"))
print(paste("Percent increase in Prop MAOC for a", percentage_increase, "% increase in soil health is", round(percent_increase_propmaoc, 2), "%"))
# Perform linear regression
regression_model <- lm(mgCpergSoilP ~ mgCpergSoilM, data = data)
# Summarize the regression model
summary(regression_modelPM)
# Perform linear regression
regression_modelPM <- lm(mgCpergSoilP ~ mgCpergSoilM, data = data)
# Summarize the regression model
summary(regression_modelPM)
ggplot(data, aes(x = mgCpergSoilM, y = mgCpergSoilP)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(
x = expression(paste("mg MAOC ", g^{-1}, " soil")),
y = expression(paste("mg POC ", g^{-1}, " soil"))
) +
theme_minimal()
ggplot(data, aes(x = mgCpergSoilP, y = mgCpergSoilM)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, color = "black") +
labs(
x = expression(paste("mg POC ", g^{-1}, " soil")),
y = expression(paste("mg MAOC ", g^{-1}, " soil"))
) +
theme_minimal()
# Perform linear regression
regression_modelPM <- lm(mgCpergSoilM ~ mgCpergSoilP, data = data)
# Summarize the regression model
summary(regression_modelPM)
