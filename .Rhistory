lwd = 1) +
facet_wrap(~clay_facet) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression(paste("Proportion of Carbon in MAOC"))) +
scale_x_continuous(expression("Mean Annual Temperature (°C)"),
label = scales::comma) +
guides(col=guide_legend(title="Mean Annual Precipitation (cm)")) +
scale_color_manual(values = c("red", "blue")) # adjust colors if needed
propMAOM_3way
ggarrange(mgMAOM_3way,propMAOM_3way,nrow=1, common.legend=T, legend="left", labels=c("a","b"))
Figure5 <--ggarrange(mgMAOM_3way,propMAOM_3way,nrow=1, common.legend=T, legend="right", labels=c("a","b"))
Figure5 <-ggarrange(mgMAOM_3way,propMAOM_3way,nrow=1, common.legend=T, legend="right", labels=c("a","b"))
ggarrange(mgMAOM_3way,propMAOM_3way,nrow=1, common.legend=T, legend="right", labels=c("a","b"))
Figure5 <-ggarrange(mgMAOM_3way,propMAOM_3way,nrow=1, common.legend=T, legend="right", labels=c("a","b"))
ggsave("Figure5.jpeg", width = 15, height = 8, units="cm")
mgMAOM_3way <- mgMAOM_3way +
theme(legend.text = element_text(size = 8),  # Adjust legend text size
legend.title = element_text(size = 10))  # Adjust legend title size
propMAOM_3way <- propMAOM_3way +
theme(legend.text = element_text(size = 8),  # Adjust legend text size
legend.title = element_text(size = 10))  # Adjust legend title size
Figure5 <-ggarrange(mgMAOM_3way,propMAOM_3way,nrow=1, common.legend=T, legend="right", labels=c("a","b"))
ggsave("Figure5.jpeg", width = 15, height = 8, units="cm", dpi=300)
# Example adjustment for individual plots (modify as necessary)
mgMAOM_3way <- mgMAOM_3way +
theme(legend.text = element_text(size = 6),  # Adjust legend text size
legend.title = element_text(size = 8))  # Adjust legend title size
propMAOM_3way <- propMAOM_3way +
theme(legend.text = element_text(size = 6),  # Adjust legend text size
legend.title = element_text(size = 8))  # Adjust legend title size
Figure5 <-ggarrange(mgMAOM_3way,propMAOM_3way,nrow=1, common.legend=T, legend="right", labels=c("a","b"))
ggsave("Figure5.jpeg", width = 20, height = 6, units="cm", dpi=300)
#for 3 way interaction of tmean, ppt, and texture
pred_3way <- ggpredict(m4M, terms = c("tmeanC","ppt.cm[101,110]",
"soil_texture_clay[10, 32]"))
pred_3way$ppt_group <- pred_3way$group
levels(pred_3way$ppt_group) <- c("low (92-104)",
"high (104-142)")
pred_3way$clay_facet <- pred_3way$facet
levels(pred_3way$clay_facet) <- c("low clay (6-19%)",
"high clay (19-54%)")
data <- data %>%
drop_na(ppt.cm) %>%
drop_na(soil_texture_clay) %>%
dplyr::mutate(ppt_group = cut(ppt.cm, breaks = c(92,104,142)),
clay_facet = cut(soil_texture_clay, breaks = c(6,19,54)))
levels(data$ppt_group) <- c("low (92-104)",
"high (104-142)")
levels(data$clay_facet) <- c("low clay (6-19%)",
"high clay (19-54%)")
propMAOM_3way <-data %>%
ggplot() +
geom_point(aes(x = tmeanC, y = logitpropM, col = ppt_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_3way, mapping = aes(x=x, y=predicted, col = ppt_group), #plot the model's prediction (based on linear )
lwd = 1) +
facet_wrap(~clay_facet) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression(paste("Proportion of C as MAOC"))) +
scale_x_continuous(expression("Mean Annual Temperature (°C)"),
label = scales::comma) +
guides(col=guide_legend(title="Mean Annual Precipitation (cm)")) +
scale_color_manual(values = c("red", "blue")) # adjust colors if needed
propMAOM_3way
ggsave("propMAOM_3way.jpeg", width = 8, height = 4)
#make pretty
# Example adjustment for individual plots (modify as necessary)
mgMAOM_3way <- mgMAOM_3way +
theme(legend.text = element_text(size = 6),  # Adjust legend text size
legend.title = element_text(size = 8))  # Adjust legend title size
propMAOM_3way <- propMAOM_3way +
theme(legend.text = element_text(size = 6),  # Adjust legend text size
legend.title = element_text(size = 8))  # Adjust legend title size
Figure5 <-ggarrange(mgMAOM_3way,propMAOM_3way,nrow=1, common.legend=T, legend="right", labels=c("a","b"))
ggsave("Figure5.jpeg", width = 20, height = 6, units="cm", dpi=300)
#for aggregate stability
pred_aggregate_stability <- ggpredict(m3, terms = c("aggregate_stability"))
mgMAOM_aggregate_stability <-data %>%
ggplot() +
geom_point(aes(x = aggregate_stability, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg MAOC g"^-1,"soil"))+
scale_x_continuous(expression("Aggregate Stability (%)"),
label = scales::comma)
mgMAOM_aggregate_stability
ggsave("mgMAOM_aggregate_stability.jpeg", width = 15, height = 8, units="cm")
# Define the coefficient for aggregate stability
coef_aggregate_stability <-  0.10780  # in mg find in model summary
# Define the mean value of MAOC
# Print the mean MAOC value
mean_maoc <- mean(data$mgCpergSoilM, na.rm = TRUE)
print(paste("The mean MAOC is", round(mean_maoc, 2), "mg"))
mean_MAOC <- 16.77  # Replace with the actual mean value from data
percentage_increase <- 10  #set a percentage increase of agg stability based on data
# Calculate the absolute increase in MAOC for the given percentage increase in aggregate stability
absolute_increase_maoc <- coef_aggregate_stability * percentage_increase
# Calculate the percent increase in POC for a 1% increase in aggregate stability
Onepercent_increase_maoc <- (coef_aggregate_stability / mean_MAOC) * 100
# Calculate the percent increase in POC based on the mean value
percent_increase_maoc <- (absolute_increase_maoc / mean_MAOC) * 100
# Print the result
print(paste("Absolute increase in MAOC for a 10% increase in aggregate stability is", round(absolute_increase_maoc, 2), "mg"))
# Print the result
print(paste("Percent increase in MAOC for a 1% increase in aggregate stability is", round(Onepercent_increase_maoc, 2), "%"))
# Print the result
print(paste("Percent increase in MAOC for a", percentage_increase, "% increase in aggregate stability is", round(percent_increase_maoc, 2), "%"))
#for active_carbon
pred_active_carbon <- ggpredict(m3, terms = c("active_carbon"))
mgMAOM_active_carbon <-data %>%
ggplot() +
geom_point(aes(x = active_carbon, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_active_carbon, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg MAOC g"^-1,"soil"))+
scale_x_continuous(expression("Active Carbon (ppm)"),
label = scales::comma)
mgMAOM_active_carbon
ggsave("mgMAOM_active_carbon.jpeg", width = 15, height = 8, units="cm")
#get them side by side for presentation
#Figure5
ggarrange(mgMAOM_aggregate_stability,mgMAOM_active_carbon,nrow=1, common.legend=T, legend="left", labels=c("a","b"))
ggsave("Figure5.jpeg", width = 15, height = 8, units="cm")
#for aggregate stability
pred_aggregate_stability <- ggpredict(m3, terms = c("aggregate_stability"))
mgMAOM_aggregate_stability <-data %>%
ggplot() +
geom_point(aes(x = aggregate_stability, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg MAOC g"^-1*"soil"))+
scale_x_continuous(expression("Aggregate Stability (%)"),
label = scales::comma)
mgMAOM_aggregate_stability
ggsave("mgMAOM_aggregate_stability.jpeg", width = 15, height = 8, units="cm")
# Define the coefficient for aggregate stability
coef_aggregate_stability <-  0.10780  # in mg find in model summary
# Define the mean value of MAOC
# Print the mean MAOC value
mean_maoc <- mean(data$mgCpergSoilM, na.rm = TRUE)
print(paste("The mean MAOC is", round(mean_maoc, 2), "mg"))
mean_MAOC <- 16.77  # Replace with the actual mean value from data
percentage_increase <- 10  #set a percentage increase of agg stability based on data
# Calculate the absolute increase in MAOC for the given percentage increase in aggregate stability
absolute_increase_maoc <- coef_aggregate_stability * percentage_increase
# Calculate the percent increase in POC for a 1% increase in aggregate stability
Onepercent_increase_maoc <- (coef_aggregate_stability / mean_MAOC) * 100
# Calculate the percent increase in POC based on the mean value
percent_increase_maoc <- (absolute_increase_maoc / mean_MAOC) * 100
# Print the result
print(paste("Absolute increase in MAOC for a 10% increase in aggregate stability is", round(absolute_increase_maoc, 2), "mg"))
# Print the result
print(paste("Percent increase in MAOC for a 1% increase in aggregate stability is", round(Onepercent_increase_maoc, 2), "%"))
# Print the result
print(paste("Percent increase in MAOC for a", percentage_increase, "% increase in aggregate stability is", round(percent_increase_maoc, 2), "%"))
#for active_carbon
pred_active_carbon <- ggpredict(m3, terms = c("active_carbon"))
mgMAOM_active_carbon <-data %>%
ggplot() +
geom_point(aes(x = active_carbon, y = mgCpergSoilM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_active_carbon, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg MAOC g"^-1*"soil"))+
scale_x_continuous(expression("Active Carbon (ppm)"),
label = scales::comma)
mgMAOM_active_carbon
ggsave("mgMAOM_active_carbon.jpeg", width = 15, height = 8, units="cm")
#get them side by side for presentation
#Figure5
ggarrange(mgMAOM_aggregate_stability,mgMAOM_active_carbon,nrow=1, common.legend=T, legend="left", labels=c("a","b"))
ggsave("Figure5.jpeg", width = 15, height = 8, units="cm")
# Create the plot
mgPOM2_aggregate_stability <- data %>%
ggplot(aes(x = aggregate_stability, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted, color = "black"), lwd = 1) +  # Plot the model's prediction
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(
name = expression("mg POC " * g^{-1} * " soil")) +
scale_x_continuous(name = expression("Aggregate Stability (%)"),
labels = scales::comma) +
mgPOM2_aggregate_stability
mgPOM2_aggregate_stability <- data %>%
ggplot(aes(x = aggregate_stability, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted, color = "black"), lwd = 1) +  # Plot the model's prediction
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(
name = expression("mg POC " * g^{-1} * " soil")) +
scale_x_continuous(name = expression("Aggregate Stability (%)"),
labels = scales::comma) +
mgPOM2_aggregate_stability
mgPOM2_aggregate_stability <- data %>%
ggplot(aes(x = aggregate_stability, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted, color = "black"), lwd = 1) +  # Plot the model's prediction
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(
name = expression("mg POC " * g^{-1} * " soil")) +
scale_x_continuous(name = expression("Aggregate Stability (%)"),
labels = scales::comma) +
mgPOM2_aggregate_stability
# Generate predictions from the model
pred_aggregate_stability <- ggpredict(m3P, terms = c("aggregate_stability"))
# Convert the ggpredict object to a data frame
pred_df <- as.data.frame(pred_aggregate_stability)
mgPOM2_aggregate_stability <- data %>%
ggplot(aes(x = aggregate_stability, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted, color = "black"), lwd = 1) +  # Plot the model's prediction
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(
name = expression("mg POC " * g^{-1} * " soil")) +
scale_x_continuous(name = expression("Aggregate Stability (%)"),
labels = scales::comma) +
mgPOM2_aggregate_stability <- data %>%
ggplot(aes(x = aggregate_stability, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted, color = "black"), lwd = 1) +  # Plot the model's prediction
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(
name = expression("mg POC " * g^{-1} * " soil")) +
scale_x_continuous(name = expression("Aggregate Stability (%)"),
labels = scales::comma) +
mgPOM2_aggregate_stability
# Generate predictions from the model
pred_active_carbon <- ggpredict(m3P, terms = c("active_carbon"))
# Convert the ggpredict object to a data frame
pred_df <- as.data.frame(pred_active_carbon)
# Create the plot
mgPOM_active_carbon <- data %>%
ggplot(aes(x = active_carbon, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted), color = "black", lwd = 1) +  # Change color of the line
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(
name = expression("mg POC " * g^{-1} * " soil")
) +
scale_x_continuous(
name = expression("Active Carbon (ppm)"),
labels = scales::comma
)
mgPOM_active_carbon
mgPOM_aggregate_stability <- data %>%
ggplot(aes(x = aggregate_stability, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted, color = "black"), lwd = 1) +  # Plot the model's prediction
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(
name = expression("mg POC " * g^{-1} * " soil")) +
scale_x_continuous(name = expression("Aggregate Stability (%)"),
labels = scales::comma) +
mgPOM_aggregate_stability
mgPOM_aggregate_stability <- data %>%
ggplot(aes(x = aggregate_stability, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted, color = "black"), lwd = 1) +  # Plot the model's prediction
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(
name = expression("mg POC " * g^{-1} * " soil")) +
scale_x_continuous(name = expression("Aggregate Stability (%)"),
labels = scales::comma)
mgPOM_aggregate_stability
# Generate predictions from the model
pred_aggregate_stability <- ggpredict(m3P, terms = c("aggregate_stability"))
# Convert the ggpredict object to a data frame
pred_df <- as.data.frame(pred_aggregate_stability)
mgPOM_aggregate_stability <- data %>%
ggplot(aes(x = aggregate_stability, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted, color = "black"), lwd = 1) +  # Plot the model's prediction
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(
name = expression("mg POC " * g^{-1} * " soil")) +
scale_x_continuous(name = expression("Aggregate Stability (%)"),
labels = scales::comma)
mgPOM_aggregate_stability
mgPOM_aggregate_stability <- data %>%
ggplot(aes(x = aggregate_stability, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted, color = "black"), lwd = 1) +  # Plot the model's prediction
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(
name = expression("mg POC " * g^{-1} * " soil")) +
scale_x_continuous(name = expression("Aggregate Stability (%)"),
labels = scales::comma)
mgPOM_aggregate_stability
mgPOM_active_carbon
mgPOM_aggregate_stability <- data %>%
ggplot(aes(x = aggregate_stability, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted, color = "black"), lwd = 1) +  # Plot the model's prediction
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(
name = expression("mg POC " * g^{-1} * " soil")) +
scale_x_continuous(name = expression("Aggregate Stability (%)"),
labels = scales::comma)
mgPOM_aggregate_stability
mgPOM_aggregate_stability <- data %>%
ggplot(aes(x = aggregate_stability, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted, color = "black"), lwd = 1) +  # Plot the model's prediction
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(
name = expression("mg POC " * g^{-1} * " soil")) +
scale_x_continuous(name = expression("Aggregate Stability (%)"),
labels = scales::comma)
mgPOM_aggregate_stability
mgPOM_aggregate_stability <- data %>%
ggplot(aes(x = aggregate_stability, y = mgCpergSoilP)) +
geom_point(size = 1.5, alpha = 0.5) +
geom_line(data = pred_df, aes(x = x, y = predicted), color = "black", lwd = 1) +  # Plot the model's prediction
own_theme +  # Ensure 'own_theme' is defined or remove it
theme(legend.position = "none") +
scale_y_continuous(name = expression("mg POC " * g^{-1} * " soil")) +
scale_x_continuous(name = expression("Aggregate Stability (%)"),
labels = scales::comma)
mgPOM_aggregate_stability
ggarrange(mgPOM_aggregate_stability,mgPOM_active_carbon,nrow=1, common.legend=T, legend="left", labels=c("a","b"))
m3 = gls(mgCpergSoilM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon + aggregate_stability,
data = data,
na.action = na.exclude,
method = "ML")
summary(m3)
m2 = gls(mgCpergSoilM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon + ph * soil_texture_clay + aggregate_stability,
data = data,
na.action = na.exclude,
method = "ML")
summary(m2)
m3 = gls(mgCpergSoilM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon + aggregate_stability + pH
data = data,
m3 = gls(mgCpergSoilM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon + aggregate_stability
data = data,
m3 = gls(mgCpergSoilM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon + aggregate_stability +
data = data,
m3 = gls(mgCpergSoilM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon + aggregate_stability + ph,
data = data,
na.action = na.exclude,
method = "ML")
summary(m3)
m3 = gls(mgCpergSoilM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon + aggregate_stability,
data = data,
na.action = na.exclude,
method = "ML")
summary(m3)
m3P=gls(mgCpergSoilP~ppt.cm*tmeanC
+aggregate_stability+active_carbon,
data=data, na.action=na.exclude, method="REML")
summary(m3P)
m3P=gls(mgCpergSoilP~ppt.cm*tmeanC
+aggregate_stability+active_carbon+ph,
data=data, na.action=na.exclude, method="ML")
summary(m3P)
# Create the stacked bar plot
ggplot(data, aes(x = Type.x, fill = factor(Tillage_1to4))) +
geom_bar(position = "stack") +
labs(title = "Distribution of Tillage Categories by Field Type",
x = "Field Type",
y = "Count",
fill = "Tillage Category") +
theme_minimal()
# Create the stacked bar plot
ggplot(data, aes(x = Type.x, fill = factor(Tillage_1to4))) +
geom_bar(position = "stack") +
labs(title = "Distribution of Tillage Categories by Field Type",
x = "Crop Type",
y = "Count",
fill = "Tillage Category") +
theme_minimal()
# Create the stacked bar plot
ggplot(data, aes(x = Type.x, fill = factor(Tillage_1to4))) +
geom_bar(position = "stack") +
labs(title = "",
x = "Crop Type",
y = "Fields",
fill = "Tillage Category") +
theme_minimal()
# Assuming Tillage_1to4 is a factor
data$Tillage_1to4 <- factor(data$Tillage_1to4,
levels = c(1, 2, 3, 4),
labels = c("No Till", "1-7" Till",
# Assuming Tillage_1to4 is a factor
data$Tillage_1to4 <- factor(data$Tillage_1to4,
levels = c(1, 2, 3, 4),
labels = c("No Till",
"1-7 cm Till",
"7-9 cm Till",
">9 cm Till"))
# Create the stacked bar plot
ggplot(data, aes(x = Type.x, fill = Tillage_1to4)) +
geom_bar(position = "stack") +
labs(title = "",
x = "Crop Type",
y = "Fields",
fill = "Tillage Category") +
theme_minimal()
# Assuming Tillage_1to4 is a factor
data$Tillage_1to4 <- factor(data$Tillage_1to4,
levels = c(1, 2, 3, 4),
labels = c("No Till",
"1-7 inch Till",
"7-9 inch Till",
">9 inch Till"))
# Create the stacked bar plot
ggplot(data, aes(x = Type.x, fill = Tillage_1to4)) +
geom_bar(position = "stack") +
labs(title = "",
x = "Crop Type",
y = "Fields",
fill = "Tillage Category") +
theme_minimal()
# Assuming Tillage_1to4 is a factor
data$Tillage_1to4 <- factor(data$Tillage_1to4,
levels = c(1, 2, 3, 4),
labels = c("No Till",
"1-7 inch Till",
"7-9 inch Till",
">9 inch Till"))
# Create the stacked bar plot
ggplot(data, aes(x = Type.x, fill = Tillage_1to4)) +
geom_bar(position = "stack") +
labs(title = "",
x = "Crop Type",
y = "Fields",
fill = "Tillage Category") +
theme_minimal()
# Assuming Tillage_1to4 is a factor
data$Tillage_1to4 <- factor(data$Tillage_1to4,
levels = c(1, 2, 3, 4),
labels = c("No Till",
"1-7 inch Till",
"7-9 inch Till",
">9 inch Till"))
# Create the stacked bar plot
ggplot(data, aes(x = Type.x, fill = Tillage_1to4)) +
geom_bar(position = "stack") +
labs(title = "",
x = "Crop Type",
y = "Fields",
fill = "Tillage Category") +
theme_minimal()
# Assuming Tillage_1to4 is a factor
data$Tillage_1to4 <- factor(data$Tillage_1to4,
levels = c(1, 2, 3, 4),
labels = c("No Till",
"1-7inch Till",
"7-9inch Till",
">9inch Till"))
# Create the stacked bar plot
ggplot(data, aes(x = Type.x, fill = Tillage_1to4)) +
geom_bar(position = "stack") +
labs(title = "",
x = "Crop Type",
y = "Fields",
fill = "Tillage Category") +
theme_minimal()
# Assuming Tillage_1to4 is a factor
data$Tillage_1to4 <- factor(data$Tillage_1to4,
levels = c(1, 2, 3, 4),
labels = c("No Till",
"1-7inch Till",
"7-9inch Till",
">9inch Till"))
# Create the stacked bar plot
ggplot(data, aes(x = Type.x, fill = factor(Tillage_1to4))) +
geom_bar(position = "stack") +
labs(title = "",
x = "Crop Type",
y = "Fields",
fill = "Tillage Category") +
theme_minimal()
# Check the conversion
summary(data$Tillage_1to4)
# Assuming Tillage_1to4 is a factor
data$Tillage_1to4 <- factor(data$Tillage_1to4,
levels = c(1, 2, 3, 4),
labels = c("Tillage Type 1", "Tillage Type 2",
"Tillage Type 3", "Tillage Type 4"))
summary(data$Tillage_1to4)
