#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
library(tidyverse)
library(ggplot2)
library(dplyr)
library(openmeteo)
Loc <- read.csv(file="Location.csv", header=TRUE, sep=",")
data <- read.csv("data.csv")
library(ggplot2)
library(sf)
library(maps)
library(mapdata)
vermont_map <- map_data("state")
vermont_map <- subset(vermont_map, region == "vermont")
ggplot() +
geom_polygon(data = vermont_map, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_point(data = Loc, aes(x = lon, y = lat), color = "red", size = 3) +
coord_fixed(1.3) +  # Fix aspect ratio
labs(title = "Latitude and Longitude Points on the Map of Vermont",
x = "Longitude",
y = "Latitude") +
theme_minimal()
data <- read.csv(file="fracData2.csv", header=TRUE, sep=",")
data <- data %>%
left_join(Loc, by = "Field_Code")
ggplot() +
geom_polygon(data = vermont_map, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_point(data = data, aes(x = lon, y = lat, color = mgCpergSoilM), size = 3) +
scale_color_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
coord_fixed(1.3) +  # Fix aspect ratio
labs(title = "Latitude and Longitude Points on the Map of Vermont",
x = "Longitude",
y = "Latitude",
color = "MgMAOM") +  # Add color legend title
theme_minimal()
summary(data$mgCpergSoilM)
ggplot() +
geom_polygon(data = vermont_map, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_point(data = data, aes(x = lon, y = lat, color = mgCpergSoilM), size = 3) +
scale_color_gradientn(colors = c("blue", "green", "yellow", "red"),  # Adjust colors as needed
breaks = c(11, 15, 21, 25),
labels = c("Low", "Moderate", "High", "Very High"),
limits = c(3, 48)) +  # Adjust limits based on your data
coord_fixed(1.3) +  # Fix aspect ratio
labs(title = "Latitude and Longitude Points on the Map of Vermont",
x = "Longitude",
y = "Latitude",
color = "MgMAOM") +  # Add color legend title
theme_minimal()
summary(data$mgCpergSoilM)
ggplot() +
geom_polygon(data = vermont_map, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_point(data = data, aes(x = lon, y = lat, color = mgCpergSoilM), size = 3) +
scale_color_gradientn(colors = c("blue", "green", "yellow", "red"),  # Adjust colors as needed
breaks = c(11, 15, 21, 25),
labels = c("Low", "Moderate", "High", "Very High"),
limits = c(3, 48)) +  # Adjust limits based on your data
coord_fixed(1.3) +  # Fix aspect ratio
labs(title = "Farm Locations colored by levels of MAOM(mg)",
x = "Longitude",
y = "Latitude",
color = "MgMAOM") +  # Add color legend title
theme_minimal()
summary(data$mgCpergSoilM)
ggplot() +
geom_polygon(data = vermont_map, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_point(data = data, aes(x = lon, y = lat, color = mgCpergSoilM), size = 3) +
scale_color_gradientn(colors = c("blue", "green", "yellow", "red"),  # Adjust colors as needed
breaks = c(11, 15, 21, 25),
labels = c("Low", "Moderate", "High", "Very High"),
limits = c(3, 48)) +  # Adjust limits based on your data
coord_fixed(1.3) +  # Fix aspect ratio
labs(title = "Farm locations by levels of MAOM(mg)",
x = "Longitude",
y = "Latitude",
color = "MgMAOM") +  # Add color legend title
theme_minimal()
summary(data$mgCpergSoilP)
ggplot() +
geom_polygon(data = vermont_map, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_point(data = data, aes(x = lon, y = lat, color = mgCpergSoilP), size = 3) +
scale_color_gradientn(colors = c("blue", "green", "yellow", "red"),  # Adjust colors as needed
breaks = c(4, 6, 8, 12),
labels = c("Low", "Moderate", "High", "Very High"),
limits = c(2, 32)) +  # Adjust limits based on your data
coord_fixed(1.3) +  # Fix aspect ratio
labs(title = "Farm locations by levels of POM(mg)",
x = "Longitude",
y = "Latitude",
color = "MgPOM") +  # Add color legend title
theme_minimal()
library(gtools)
data <- data %>%
dplyr::mutate(logitpropM = logit(propM))
summary(data$logitpropM)
ggplot() +
geom_polygon(data = vermont_map, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_point(data = data, aes(x = lon, y = lat, color = logitpropM), size = 3) +
scale_color_gradientn(colors = c("blue", "green", "yellow", "red"),  # Adjust colors as needed
breaks = c(.4, .8, 1.1, 2),
labels = c("Low", "Moderate", "High", "Very High"),
limits = c(-1, 2)) +  # Adjust limits based on your data
coord_fixed(1.3) +  # Fix aspect ratio
labs(title = "Farm locations by proportion of MAOM",
x = "Longitude",
y = "Latitude",
color = "logit Proportion MAOM") +  # Add color legend title
theme_minimal()
library(corrplot)
cordata <- cor(data[,c("mgCpergSoilM","ph","ppt.cm","Latitude", "Longitude", "tmeanC","aggregate_stability","soil_texture_clay","active_carbon")], use="pairwise.complete.obs", method="pearson")
corrplot(cordata)
view(cordata)
library(nlme)
m3 = gls(mgCpergSoilM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon +aggregate_stability,
data = data,
na.action = na.exclude,
method = "ML")
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
library(tidyverse)
library(ggplot2)
library(dplyr)
library(corrplot)
library(emmeans)
library(nlme)
library(ggeffects)
data <- read.csv("data.csv")
m3P=gls(mgCpergSoilP~ppt.cm*tmeanC
+aggregate_stability+active_carbon
, data=data, na.action=na.exclude, method="ML")
summary(m3P)
n <- nobs(m3P)
print(n)
m3 = gls(mgCpergSoilM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon + aggregate_stability,
data = data,
na.action = na.exclude,
method = "ML")
summary(m3)
n <- nobs(m3)
print(n)
m4M <- gls(logitpropM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon,
data = data,
na.action = na.exclude,
method = "ML")
summary(m4M)
ata$logitpropM.pred=as.vector(fitted(m4M))
data$logitpropM.pred=as.vector(fitted(m4M))
R3=lm(logitpropM~logitpropM.pred, data=data, na.action=na.omit)
summary(R3)
summary(m3P)
anova(m3P)
# Perform ANOVA on the model
anova_result <- anova(m3P)
# Print the ANOVA table
print(anova_result)
# Extract the degrees of freedom for each variable
num_df <- anova_result$"numDF"  # Numerator degrees of freedom
den_df <- anova_result$"denDF"  # Denominator degrees of freedom
# Print the degrees of freedom
print(num_df)
print(den_df)
m3 = gls(mgCpergSoilM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon + aggregate_stability,
data = data,
na.action = na.exclude,
method = "ML")
summary(m3)
anova(m3)
m4M <- gls(logitpropM ~ ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
active_carbon,
data = data,
na.action = na.exclude,
method = "ML")
summary(m4M)
anova(m4M)
# Perform linear regression
regression_model <- lm(mgCpergSoilM ~ overall.score, data = data)
# Summarize the regression model
summary(regression_model)
# Perform linear regression
regression_model <- lm(mgCpergSoilP ~ overall.score, data = data)
# Summarize the regression model
summary(regression_model)
# Perform linear regression
regression_model <- lm(logitpropM ~ overall.score, data = data)
# Summarize the regression model
summary(regression_model)
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
#load your libraries
library(tidyverse)
library(ggplot2)
library(dplyr)
library(corrplot)
library(emmeans)
library(nlme)
library(ggeffects)
##call in the analytical data
data <- read.csv("data.csv")
View(data)
# Perform ANOVA
anova_result <- aov(OM30 ~ Type.x, data = data)
# Summary of ANOVA
summary(anova_result)
# Conduct post-hoc tests using Tukey's HSD test for pairwise comparisons
posthoc <- emmeans(anova_result, ~ Type.x)
# Print pairwise comparisons
print(posthoc, type = "compact")
# Use table() function to count occurrences of each field type
type_counts <- table(data$Type.x)
# Print the counts
print(type_counts)
library (gmodels)
# Create a contingency table
contingency_table <- table(data$Type.x, data$soil_texture_class)
# Print the contingency table
print(contingency_table)
# Perform chi-square test of independence
chi2_test <- chisq.test(contingency_table)
# Print the chi-square test results
print(chi2_test)
# Create a contingency table
contingency_table <- table(data$Type.x, data$soil_texture_class)
# Convert contingency table to data frame for plotting
contingency_df <- as.data.frame.matrix(contingency_table)
# Reshape data for plotting (optional, depending on how you want to visualize)
library(reshape2)
contingency_melted <- melt(contingency_df)
# Plot clustered bar plot
ggplot(contingency_melted, aes(x = soil_texture_class, y = value, fill = Type.x)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Soil Texture Class", y = "Count") +
ggtitle("Distribution of Field Types by Soil Texture") +
theme_minimal()
install.packages(reshape2)
library(reshape2)
# Create a contingency table
contingency_table <- table(data$Type.x, data$soil_texture_class)
# Convert contingency table to data frame for plotting
contingency_df <- as.data.frame.matrix(contingency_table)
# Reshape data for plotting (optional, depending on how you want to visualize)
contingency_melted <- melt(contingency_df)
# Plot clustered bar plot
ggplot(contingency_melted, aes(x = soil_texture_class, y = value, fill = Type.x)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Soil Texture Class", y = "Count") +
ggtitle("Distribution of Field Types by Soil Texture") +
theme_minimal()
# Plot heatmap of contingency table
heatmap.2(as.matrix(contingency_table),
trace = "none",
col = heat.colors(length(unique(data$Type.x))),
dendrogram = "row",
main = "Association between Field Type and Soil Texture",
xlab = "Soil Texture Class",
ylab = "Field Type")
library(gplots)
install.packages(gplots)
# Create a contingency table
contingency_table <- table(data$Type.x, data$soil_texture_class)
# Print the contingency table
print(contingency_table)
# Perform chi-square test of independence
chi2_test <- chisq.test(contingency_table)
# Print the chi-square test results
print(chi2_test)
# chi test shows that this is a significant assosiation between field trype and soil texture class
# Assuming your data frame is named 'data' and contains columns 'Type.x' and 'soil_texture_class'
# Make sure 'Type.x' and 'soil_texture_class' are factors for correct plotting
# Create a contingency table
contingency_table <- table(data$Type.x, data$soil_texture_class)
# Convert contingency table to data frame for plotting
contingency_df <- as.data.frame.matrix(contingency_table)
# Reshape data for plotting (optional, depending on how you want to visualize)
contingency_melted <- melt(contingency_df)
# Plot clustered bar plot
ggplot(contingency_melted, aes(x = soil_texture_class, y = value, fill = Type.x)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Soil Texture Class", y = "Count") +
ggtitle("Distribution of Field Types by Soil Texture") +
theme_minimal()
# Create a contingency table
contingency_table <- table(data$Type.x, data$soil_texture_class)
# Print the contingency table
print(contingency_table)
# Perform chi-square test of independence
chi2_test <- chisq.test(contingency_table)
# Create a contingency table
contingency_table <- table(data$Type.x, data$soil_texture_class)
# Convert contingency table to data frame for plotting
contingency_df <- as.data.frame.matrix(contingency_table)
# Example data generation (replace with your actual data)
set.seed(123)
data <- data.frame(
soil_texture_class = sample(c("Sandy", "Loamy", "Clayey"), 100, replace = TRUE),
Type.x = sample(c("Corn", "Field Crops", "Hay", "Pasture", "Veg"), 100, replace = TRUE),
mgCpergSoilP = rnorm(100, mean = 10, sd = 2)
)
# Create a violin plot with individual data points and mean line for soil texture and field type
ggplot(data, aes(x = soil_texture_class, y = mgCpergSoilP, fill = Type.x)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Create the violin plot with semi-transparent fill
geom_jitter(width = 0.2, size = 1, position = position_jitterdodge()) +  # Add jittered points, dodge by Type.x
stat_summary(fun = mean, geom = "point", shape = 23, size = 2, color = "black", fill = "yellow", position = position_dodge(width = 0.2)) +  # Add mean points, dodge by Type.x
labs(title = "Distribution of mgCpergSoilP by Soil Texture and Field Type",
x = "Soil Texture Class",
y = "mgC per g Soil POM",
fill = "Field Type") +
theme_minimal() +  # Apply a minimal theme for a clean look
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Adjust text angle, justification, and size
plot.margin = margin(5, 5, 10, 5))  # Increase the bottom margin to give more space to labels
# Load necessary library
library(ggplot2)  # For plotting
# Example data generation (replace with your actual data)
set.seed(123)
data <- data.frame(
soil_texture_class = sample(c("Sandy", "Loamy", "Clayey"), 100, replace = TRUE),
Type.x = sample(c("Corn", "Field Crops", "Hay", "Pasture", "Veg"), 100, replace = TRUE),
mgCpergSoilP = rnorm(100, mean = 10, sd = 2)
)
# Get unique options in soil_texture_class
unique_soil_texture <- unique(data$soil_texture_class)
# Print the unique options
print(unique_soil_texture)
view(data$soil_texture_class)
# Create a boxplot or violin plot
ggplot(data, aes(x = cut(soil_texture_clay, breaks = 5), y = Type.x)) +
geom_boxplot() +  # or geom_violin() for a violin plot
labs(x = "Soil Texture Clay Levels", y = "Field Type") +
ggtitle("Comparison of Field Types across Soil Texture Clay Levels")
# Create a violin plot with individual data points and mean line for soil texture and field type
ggplot(data, aes(x = soil_texture_class, y = Type.x, fill = Type.x)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Create the violin plot with semi-transparent fill
geom_jitter(width = 0.2, size = 1, position = position_jitterdodge()) +  # Add jittered points, dodge by Type.x
stat_summary(fun = mean, geom = "point", shape = 23, size = 2, color = "black", fill = "yellow", position = position_dodge(width = 0.2)) +  # Add mean points, dodge by Type.x
labs(title = "Distribution of field type by Soil Texture and Field Type",
x = "Soil Texture Class",
y = "mgC per g Soil POM",
fill = "Field Type") +
theme_minimal() +  # Apply a minimal theme for a clean look
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Adjust text angle, justification, and size
plot.margin = margin(5, 5, 10, 5))  # Increase the bottom margin to give more space to labels
# Create a violin plot with individual data points and mean line for soil texture and field type
ggplot(data, aes(x = soil_texture_class, y = mgCpergSoilP, fill = Type.x)) +
geom_violin(trim = FALSE, alpha = 0.5) +  # Create the violin plot with semi-transparent fill
geom_jitter(width = 0.2, size = 1, position = position_jitterdodge()) +  # Add jittered points, dodge by Type.x
stat_summary(fun = mean, geom = "point", shape = 23, size = 2, color = "black", fill = "yellow", position = position_dodge(width = 0.2)) +  # Add mean points, dodge by Type.x
labs(title = "Distribution of mgCpergSoilP by Soil Texture and Field Type",
x = "Soil Texture Class",
y = "mgC per g Soil POM",
fill = "Field Type") +
theme_minimal() +  # Apply a minimal theme for a clean look
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Adjust text angle, justification, and size
plot.margin = margin(5, 5, 10, 5))  # Increase the bottom margin to give more space to labels
# Create a boxplot or violin plot
ggplot(data, aes(x = cut(soil_texture_clay, breaks = 5), y = Type.x)) +
geom_boxplot() +  # or geom_violin() for a violin plot
labs(x = "Soil Texture Clay Levels", y = "Field Type") +
ggtitle("Comparison of Field Types across Soil Texture Clay Levels")
view(data$soil_texture_class)
view(data$soil_texture_clay)
view(data$soil_texture_clay)
View(data)
# Perform ANOVA
anova_result <- aov(soil_texture_class ~ Type.x, data = data)
# Perform ANOVA
anova_result <- aov(soil_texture_clay ~ Type.x, data = data)
##call in the analytical data
data <- read.csv("data.csv")
View(data)
# Perform ANOVA
anova_result <- aov(soil_texture_clay ~ Type.x, data = data)
# Summary of ANOVA
summary(anova_result)
# Conduct post-hoc tests using Tukey's HSD test for pairwise comparisons
posthoc <- emmeans(anova_result, ~ Type.x)
# Print pairwise comparisons
print(posthoc, type = "compact")
# Example scatter plot with jitter
ggplot(data, aes(x = Type.x, y = soil_texture_clay)) +
geom_jitter(width = 0.3, height = 0, alpha = 0.7) +
labs(x = "Field Type", y = "Soil Texture Clay") +
ggtitle("Relationship between Soil Texture Clay and Field Type") +
theme_minimal()
# Example contingency table
cont_table <- table(data$Type.x, data$soil_texture_class)
# View the contingency table
cont_table
# Load necessary library
library(vcd)  # For mosaic plot
install.packages(vcd)
install.packages("vcd")
# Load necessary library
library(vcd)  # For mosaic plot
# Load necessary library
library(vcd)  # For mosaic plot
# Example mosaic plot
mosaicplot(cont_table, main = "Mosaic Plot of Field Type vs. Soil Texture Class")
summary_data <- data %>%
group_by(soil_texture_class, Type.x) %>%
summarise(count = n()) %>%
mutate(percent = count / sum(count) * 100)  # Calculate percentage within each soil_texture_class
# Plot stacked bar plot
library(ggplot2)
ggplot(summary_data, aes(x = soil_texture_class, y = percent, fill = Type.x)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Soil Texture Class", y = "Percentage", fill = "Field Type") +
ggtitle("Distribution of Field Type across Soil Texture Classes") +
theme_minimal()
# Plot grouped bar plot
ggplot(summary_data, aes(x = soil_texture_class, y = percent, fill = Type.x)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Soil Texture Class", y = "Percentage", fill = "Field Type") +
ggtitle("Distribution of Field Type across Soil Texture Classes") +
theme_minimal()
# Install and load waffle package
install.packages("waffle")
library(waffle)
# Create waffle chart for each soil_texture_class
waffle_list <- lapply(texture_classes, function(x) {
df_subset <- summary_data[summary_data$soil_texture_class == x, ]
waffle(df_subset$percent, rows = 5, size = 0.8, title = paste("Soil Texture Class:", x),
colors = brewer.pal(n = nlevels(factor(df_subset$Type.x)), name = "Set3"))
})
# Example of performing chi-square test
cont_table <- table(data$soil_texture_class, data$Type.x)
chi_square_test <- chisq.test(cont_table)
# View the contingency table
print(cont_table)
# View the chi-square test results
print(chi_square_test)
# Perform chi-square test
cont_table <- table(data$soil_texture_class, data$Type.x)
chi_square_test <- chisq.test(cont_table)
# Residual analysis
residuals <- residuals(chi_square_test)
# View residuals
print(residuals)
# Compute adjusted residuals
adjusted_res <- chisq.test(cont_table)$residuals
# View adjusted residuals
print(adjusted_res)
# Example of mosaic plot
library(vcd)
mosaicplot(cont_table, main = "Mosaic Plot of Field Type vs. Soil Texture Class")
# Example ANOVA
anova_model <- aov(soil_texture_clay ~ Type.x, data = data)
# Summary of ANOVA
summary(anova_model)
# Example linear regression
lm_model <- lm(soil_texture_clay ~ Type.x, data = data)
# Summary of linear regression
summary(lm_model)
# Example Tukey's HSD test for post-hoc analysis
tukey_test <- TukeyHSD(anova_model)
# View Tukey's HSD test results
print(tukey_test)
