scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
data <- data %>%
mutate(group = cut(tmeanC, breaks = c(-10,6.5,25), labels = c("5", "8")))
pred_pptC <- ggpredict(m1P, terms = c("ppt.cm", "factor(tmeanC[5,8])"))
mgPOM_pptC <- data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = mgCpergSoilP), # plot your data
size = 1.5, alpha = 0.5) +
geom_line(data = pred_pptC$predicted, # use the converted predicted values data frame
aes(x = x, y = predicted, color = factor(group, levels = c(5, 8))), # color by tmeanC levels
lwd = 1) +
own_theme + # assuming you have your own theme defined
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil")) +
scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
data <- data %>%
mutate(group = cut(tmeanC, breaks = c(-10,6.5,25), labels=c(5,8)))
pred_pptC <- ggpredict(m1P, terms = c("ppt.cm", "factor(tmeanC[5,8])"))
mgPOM_pptC <- data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = mgCpergSoilP), # plot your data
size = 1.5, alpha = 0.5) +
geom_line(data = pred_pptC$predicted, # use the converted predicted values data frame
aes(x = x, y = predicted, color = factor(group, levels = c(5, 8))), # color by tmeanC levels
lwd = 1) +
own_theme + # remember to define/run own theme first
theme(legend.position = "none") +  #I think we take this out because we do want a legend of colors
scale_y_continuous(expression("mg C in POM per g soil")) +
scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
pred_pptC <- ggpredict(m1P, terms = c("ppt.cm", "factor(tmeanC[5,8])"))
data <- data %>%
mutate(group = cut(tmeanC, breaks = c(-10,6.5,25), labels = c(5, 8)))
mgPOM_pptC <- data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = mgCpergSoilP), # plot your data
size = 1.5, alpha = 0.5) +
geom_line(data = pred_pptC$predicted, # use the converted predicted values data frame
aes(x = x, y = predicted, color = factor(group, levels = c(5, 8))), # color by tmeanC levels
lwd = 1) +
own_theme + # assuming you have your own theme defined
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil")) +
scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
data <- data %>%
mutate(group = cut(tmeanC, breaks = c(-10,6.5,25)))
pred_pptC <- ggpredict(m1P, terms = c("ppt.cm", "factor(tmeanC[5,8])"))
mgPOM_pptC <- data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = mgCpergSoilP), # plot your data
size = 1.5, alpha = 0.5) +
geom_line(data = pred_pptC, # use the converted predicted values data frame
aes(x = x, y = predicted, color = group), # color by tmeanC levels
lwd = 1) +
own_theme + # assuming you have your own theme defined
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil")) +
scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
mgPOM_pptC
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
library(tidyverse)
library(ggplot2)
library(dplyr)
library(corrplot)
library(emmeans)
library(nlme)
library(ggeffects)
data <- read.csv(file="fracData.csv", header=TRUE, sep=",")
data <- data %>%
mutate(claycategory=cut(soil_texture_clay, breaks=c(-Inf, 14, 24, Inf), labels=c("low","med", "high")))
ggplot(data=data, aes(x=tmeanC, y=PropM, col=soil_texture_clay))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ claycategory, ncol=1, scales="free_x")
View (data)
ggplot(data=data, aes(x=tmeanC, y=propM, col=soil_texture_clay))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ claycategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=ppt.cm, y=propM, col=soil_texture_clay))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ claycategory, ncol=1, scales="free_x")
data <- data %>%
mutate(phcategory=cut(ph, breaks=c(-Inf,6.17, 6.52, 6.93, Inf), labels=c("low","med","high", "veryhigh")))
ggplot(data=data, aes(x=tmeanC, y=propM, col=ph))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ phcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=ppt.cm, y=propM, col=ph))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ phcategory, ncol=1, scales="free_x")
data <- data %>%
mutate(pptcategory=cut(ppt.cm, breaks=c(-Inf,101.4, 106.4, 110.0, Inf), labels=c("low","med","high", "veryhigh")))
ggplot(data=data, aes(x=tmeanC, y=propM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=aggregate_stability, y=propM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=ph, y=propM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=active.carbon, y=propM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=active_carbon, y=propM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=ph, y=propM, col=aggregate_stability))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ agStcategory, ncol=1, scales="free_x")
data <- data %>%
mutate(agStcategory=cut(aggregate_stability, breaks=c(-Inf,29.8, 46.7, 63.7, Inf), labels=c("low","med","high", "veryhigh")))
ggplot(data=data, aes(x=ph, y=propM, col=aggregate_stability))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ agStcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=ppt.cm, y=propM, col=aggregate_stability))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ agStcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=tmeanC, y=propM, col=aggregate_stability))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ agStcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=soil_texture_clay, y=propM, col=aggregate_stability))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ agStcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=active_carbon, y=propM, col=aggregate_stability))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ agStcategory, ncol=1, scales="free_x")
data <- read.csv(file="fracData.csv", header=TRUE, sep=",")
data <- data %>%
mutate(claycategory=cut(soil_texture_clay, breaks=c(-Inf, 14, 24, Inf), labels=c("low","med", "high")))
#interactions with clay
View (data)
data <- data %>%
mutate(claycategory=cut(soil_texture_clay, breaks=c(-Inf, 14, 24, Inf), labels=c("low","med", "high")))
data <- read.csv(file="fracData.csv", header=TRUE, sep=",")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(corrplot)
library(emmeans)
library(nlme)
library(ggeffects)
data <- data %>%
mutate(claycategory=cut(soil_texture_clay, breaks=c(-Inf, 14, 24, Inf), labels=c("low","med", "high")))
ggplot(data=data, aes(x=tmeanC, y=propM, col=soil_texture_clay))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ claycategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=ppt.cm, y=propM, col=soil_texture_clay))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ claycategory, ncol=1, scales="free_x")
#interactions with ph
data <- data %>%
mutate(phcategory=cut(ph, breaks=c(-Inf,6.17, 6.52, 6.93, Inf), labels=c("low","med","high", "veryhigh")))
ggplot(data=data, aes(x=tmeanC, y=propM, col=ph))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ phcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=ppt.cm, y=propM, col=ph))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ phcategory, ncol=1, scales="free_x")
#interactions with ppt
data <- data %>%
mutate(pptcategory=cut(ppt.cm, breaks=c(-Inf,101.4, 106.4, 110.0, Inf), labels=c("low","med","high", "veryhigh")))
ggplot(data=data, aes(x=tmeanC, y=propM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=aggregate_stability, y=propM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=ph, y=propM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=active_carbon, y=propM, col=ppt.cm))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ pptcategory, ncol=1, scales="free_x")
#interactions with aggregate stability
summary(data$aggregate_stability)
data <- data %>%
mutate(agStcategory=cut(aggregate_stability, breaks=c(-Inf,29.8, 46.7, 63.7, Inf), labels=c("low","med","high", "veryhigh")))
ggplot(data=data, aes(x=ph, y=propM, col=aggregate_stability))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ agStcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=ppt.cm, y=propM, col=aggregate_stability))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ agStcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=tmeanC, y=propM, col=aggregate_stability))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ agStcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=soil_texture_clay, y=propM, col=aggregate_stability))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ agStcategory, ncol=1, scales="free_x")
ggplot(data=data, aes(x=active_carbon, y=propM, col=aggregate_stability))+
geom_point()+
geom_smooth(method=lm)+
facet_wrap(~ agStcategory, ncol=1, scales="free_x")
cordata <- cor(data[,c("propM","ph","ppt.cm","tmeanC","aggregate_stability","soil_texture_clay","active_carbon")], use="pairwise.complete.obs", method="pearson")
corrplot(cordata)
view(cordata)
str(cordata)
page(cordata)
cordata
m1=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
m1M=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
summary(m1M)
anova(m1M)
mbM=gls(propM~ppt.cm*tmeanC+aggregate_stability+active_carbon+
ph+ppt.cm*soil_texture_clay+
soil_texture_clay*tmeanC, data=data, na.action=na.exclude, method="ML")
summary(mbM)
anova(mbM)
mbM=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+aggregate_stability+active_carbon, data=data, na.action=na.exclude, method="ML")
summary(mbM)
anova(mbM)
mcM=gls(propM~ppt.cm+ph+
tmeanC+aggregate_stability+active_carbon, data=data, na.action=na.exclude, method="ML")
summary(mcM)
anova(mcM)
mdM=gls(propM~ph+soil_texture_clay+
tmeanC+aggregate_stability+active_carbon, data=data, na.action=na.exclude, method="ML")
summary(mdM)
anova(mdM)
mbM=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+ph+active_carbon, data=data, na.action=na.exclude, method="ML")
summary(mbM)
anova(mbM)
#setwd("/Users/f003833/Documents/GitHub/FracFarmVT") #caitlin
setwd("C:/Users/F004SPC/Documents/GitHub/FracFarmVT") #erin
library(tidyverse)
library(ggplot2)
library(dplyr)
library(corrplot)
library(emmeans)
library(nlme)
library(ggeffects)
data <- read.csv(file="fracData.csv", header=TRUE, sep=",")
m1M=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
summary(m1M)
anova(m1M)
mbM=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+aggregate_stability+active_carbon, data=data, na.action=na.exclude, method="ML")
summary(mbM)
anova(mbM)
#minus clay
mcM=gls(propM~ppt.cm+ph+
tmeanC+aggregate_stability+active_carbon, data=data, na.action=na.exclude, method="ML")
summary(mcM)
anova(mcM)
mdM=gls(propM~ph+soil_texture_clay+
tmeanC+aggregate_stability+active_carbon, data=data, na.action=na.exclude, method="ML")
summary(mdM)
anova(mdM)
meM=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+ph+active_carbon, data=data, na.action=na.exclude, method="ML")
summary(meM)
anova(meM)
meM=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+ph+aggregate_stability, data=data, na.action=na.exclude, method="ML")
summary(meM)
anova(meM)
mfM=gls(propM~ppt.cm+soil_texture_clay+
aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
summary(mfM)
anova(mfM)
mType=aov(aggregate_stability~Type.x, data=data, na.action=na.exclude)
summary(mType)
TukeyHSD(mType)
mType=aov(propM~Type.x, data=data, na.action=na.exclude)
summary(mType)
TukeyHSD(mType)
m1aM=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, weights = varFixed(~propM), method="REML")
anova(m1M, m1aM)
m1aM=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, weights = varFixed(~propM), method="ML")
anova(m1M, m1aM) #adding variance structure does not improve the model
m2M=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
anova(m1M,m2M)
anova(m2M)
m3M=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+aggregate_stability+active_carbon,
data=data, na.action=na.exclude, method="ML")
anova(m2M,m3M)
anova(m3M)
m4M=gls(propM~ppt.cm*soil_texture_clay+
tmeanC+aggregate_stability*
active_carbon,
data=data, na.action=na.exclude, method="ML")
anova(m3M,m4M)
anova(m4M)
m5M=gls(propM~ppt.cm+soil_texture_clay+
aggregate_stability+
active_carbon,
data=data, na.action=na.exclude, method="ML")
anova(m4M,m5M)
anova(m5M)
m1M=gls(propM~ppt.cm+soil_texture_clay+
tmeanC+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
summary(m1M)
anova(m1M)
F_Final <- fitted(m1M)
R_Final <- residuals(m1M, type = "pearson", scaled = TRUE)
N = !is.na(data$propM)
Rfull <- NA
Rfull[N] <- R_Final
op <- par(mfrow = c(2,2), mar = c(5,4,1,1))
plot(F_Final, R_Final)
hist(Rfull)
plot(Rfull ~ data$aggregate_stability)
plot(Rfull ~ data$soil_texture_clay)
plot(Rfull ~ data$active_carbon)
plot(Rfull ~ data$tmeanC)
plot(Rfull ~ data$ppt.cm)
plot(Rfull ~ data$ph)
par(op)
op <- par(mfrow = c(2,2), mar = c(5,4,1,1)) #this makes it so all the graphs are plotted in the same window (a 2 x 2 grid)
ppt.cm.c <- summary(m1M)$coefficients[2] #predictor coefficient
ppt.cm.pr <- Rfull + ppt.cm.c*data$ppt.cm  #Residuals + pred coef * predictor value
{scatter.smooth(data$ppt.cm, ppt.cm.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(ppt.cm.c*data$ppt.cm ~ data$ppt.cm), col = "red")}
soil_texture_clay.c <- summary(m1M)$coefficients[3] #predictor coefficient
soil_texture_clay.pr <- Rfull + soil_texture_clay.c*data$soil_texture_clay  #Residuals + pred coef * predictor value
{scatter.smooth(data$soil_texture_clay, soil_texture_clay.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(soil_texture_clay.c*data$soil_texture_clay ~ data$soil_texture_clay), col = "red")}
aggregate_stability.c <- summary(m1M)$coefficients[5] #predictor coefficient
aggregate_stability.pr <- Rfull + aggregate_stability.c*data$aggregate_stability  #Residuals + pred coef * predictor value
{scatter.smooth(data$aggregate_stability, aggregate_stability.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(aggregate_stability.c*data$aggregate_stability ~ data$aggregate_stability), col = "red")}
active_carbon.c <- summary(m1M)$coefficients[6] #predictor coefficient
active_carbon.pr <- Rfull + active_carbon.c*data$active_carbon  #Residuals + pred coef * predictor value
{scatter.smooth(data$active_carbon, active_carbon.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(active_carbon.c*data$active_carbon ~ data$active_carbon), col = "red")}
par(op)
#Visualize significant relationships
own_theme <- theme_bw(base_size = 11) +
theme(rect = element_blank(),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
axis.line = element_line(color = "black"),
panel.grid.minor = element_blank())
pred_aggregate_stability <- ggpredict(m1M, terms = c("aggregate_stability"))
mgMAOM_aggregate_stability <-data %>%
ggplot() +
geom_point(aes(x = aggregate_stability, y = propM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in MAOM per g soil"))+
scale_x_continuous(expression("aggregate_stability"),
label = scales::comma)
mgMAOM_aggregate_stability
ggsave("mgMAOM_aggregate_stability.jpeg", width = 4, height = 3)
pred_aggregate_stability <- ggpredict(m1M, terms = c("aggregate_stability"))
propMAOM_aggregate_stability <-data %>%
ggplot() +
geom_point(aes(x = aggregate_stability, y = propM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("prop C in MAOM"))+
scale_x_continuous(expression("aggregate_stability"),
label = scales::comma)
propMAOM_aggregate_stability
ggsave("propMAOM_aggregate_stability.jpeg", width = 4, height = 3)
#ppt
pred_ppt <- ggpredict(m1M, terms = c("ppt.cm"))
propMAOM_ppt <-data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = propM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_ppt, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("prop C in MAOM"))+
scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma)
propMAOM_ppt
ggsave("propMAOM_ppt.jpeg", width = 4, height = 3)
#for clay # not sig different from zero, a little negative
pred_soil_texture_clay <- ggpredict(m1M, terms = c("soil_texture_clay"))
propMAOM_soil_texture_clay <-data %>%
ggplot() +
geom_point(aes(x = soil_texture_clay, y = propM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_soil_texture_clay, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("prop C in MAOM"))+
scale_x_continuous(expression("clay"),
label = scales::comma)
propMAOM_soil_texture_clay
ggsave("propMAOM_soil_texture_clay.jpeg", width = 4, height = 3)
#for active_carbon
pred_active_carbon <- ggpredict(m1M, terms = c("active_carbon"))
propMAOM_active_carbon <-data %>%
ggplot() +
geom_point(aes(x = active_carbon, y = propM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_active_carbon, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("prop C in MAOM"))+
scale_x_continuous(expression("active_carbon"),
label = scales::comma)
propMAOM_active_carbon
ggsave("propMAOM_active_carbon.jpeg", width = 4, height = 3)
pred_tmeanC <- ggpredict(m1M, terms = c("tmeanC"))
propMAOM_tmeanC <-data %>%
ggplot() +
geom_point(aes(x = tmeanC, y = propM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_tmeanC, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("prop C in MAOM"))+
scale_x_continuous(expression("active_carbon"),
label = scales::comma)
propMAOM_tmeanC
propMAOM_active_carbonbyField <-data %>%
ggplot() +
geom_point(aes(x = active_carbon, y = propM, color=Type.x),
size = 1.5, alpha = 0.5) +
#geom_smooth() +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("prop C in MAOM"))+
scale_x_continuous(expression("active_carbon"),
label = scales::comma)
propMAOM_active_carbonbyField
propMAOMbyFieldType <- ggplot(data, aes(x=Type.x, y=propMAOM)) +
geom_boxplot()
propMAOMbyFieldType
propMAOMbyFieldType <- ggplot(data, aes(x=Type.x, y=propM)) +
geom_boxplot()
propMAOMbyFieldType
logit_transformed <- logit(PropM)
#transform data logit
library(MASS)
logit_transformed <- logit(PropM)
data %>%
logit_transformed <- logit(PropM)
install MASS
install.packages("MASS")
data %>%
logit_transformed <- logit(PropM)
data %>%
logit_transformed <- logit(propM)
#transform data logit
library(MASS)
data %>%
logit_transformed <- logit(propM)
