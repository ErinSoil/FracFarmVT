plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold")  # Customize label font
)
# Print the combined plot
print(FigureBDperC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(0, 5, 0, -12)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(0, 5, 0, -20)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(-10, 5, 0, -20)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(-20, 5, 0, -20)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1,1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(0, 5, 1, 0)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1,1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(0, 5, 0, 0)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1,1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
################################TRY
# Remove the y-axis label for plot_perC
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank()  # Removes the y-axis label for plot_perC
)
# Combine the two plots side by side with shared x-axis label
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold")  # Customize label font
)
# Print the combined plot
print(FigureBDperC)
##############################TRY
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(0, 5, 0, 0)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1,1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(0, 5, 1, 0)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1,1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(0, 5, -1, 0)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1,1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(0, 5, 2, 0)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1,1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(0, 5, 5, 0)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1,1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(-20, 5, 5, 0)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1,1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(0, 5, 5, -100)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1,1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95)  # Keep the labels near the top
)
# Print the combined plot
print(FigureBDperC)
# Optionally save the figure as PNG or PDF
ggsave("FigureBDperC.jpeg", FigureBDperC, width = 12, height = 6)
# Optionally save the figure as PNG or PDF
ggsave("FigureBDperC.jpeg", FigureBDperC, path = "C:/Users/F004SPC/Documents/GitHub/deepSoilsErin/graphs", width = 8, height = 4)
#Calculate the mean and standard error (or confidence intervals) for BD grouped by SID and Depth (LD)
DataSplineMeans <- DataSplineAll3 %>%
group_by(LD) %>%
summarise(
mean_BD = mean(BD, na.rm = TRUE),
se_BD = sd(BD, na.rm = TRUE) / sqrt(n()),  # Standard error of BD
.groups = "drop")
DataSplineMeans$se_BD
# Calculate the mean, standard deviation, sample size, and 95% CI for each depth (LD)
DataSplineMeans_CI <- DataSplineAll3 %>%
group_by(LD) %>%
summarise(
mean_BD = mean(BD, na.rm = TRUE),
sd_BD = sd(BD, na.rm = TRUE),
n = n(),
ci_lower_BD = mean_BD - 1.96 * (sd_BD / sqrt(n())),  # Lower bound of the 95% CI
ci_upper_BD = mean_BD + 1.96 * (sd_BD / sqrt(n())),  # Upper bound of the 95% CI
.groups = "drop"
)
# Print the summarized data to verify
print(DataSplineMeans_CI)
# Combine both raw data points and smoothed curve with error bars into one plot
plot_BD <- ggplot() +
# Add raw BD points from deepData, with transparency for better visibility of the red line
geom_point(data = deepData, aes(x = BD, y = LD), color = "lightgrey", size = 3, alpha = 0.4) +
# Points for the mean BD (from DataSplineMeans)
geom_point(data = DataSplineMeans, aes(x = mean_BD, y = LD), color = "blue", size = 3) +  # Blue points for mean BD
# Error bars for the standard error of BD (make them more prominent by increasing line size)
#geom_errorbar(data = DataSplineMeans, aes(xmin = mean_BD - se_BD, xmax = mean_BD + se_BD, y = LD),
#   width = 0.2, size = 1.5, color = "black") +  # Error bars (black, more prominent)
# LOESS smooth curve with shaded 95% CI
# geom_smooth(data = DataSplineMeans, aes(x = mean_BD, y = LD), method = "loess", se = TRUE, color = "red", size = 1.5) +  # Red line
# Error bars for the 95% Confidence Interval of BD
geom_errorbar(data = DataSplineMeans_CI, aes(xmin = ci_lower_BD, xmax = ci_upper_BD, y = LD),
width = 0.05, size = 1.5, color = "black") +  # Error bars (black, more prominent)
# LOESS smooth curve with shaded 95% CI
geom_smooth(data = DataSplineMeans_CI, aes(x = mean_BD, y = LD), method = "loess", se = TRUE, color = "red", size = .9) +  # Red line
# Reverse the y-axis for depth (LD)
scale_y_reverse(limits = c(100, 0)) +
# Customize labels and title
labs(x = "Bulk Density", y = "Depth (cm)", title = "") +
theme_minimal()
# Print the combined plot
print(plot_BD)
# PerC
# Calculate the mean, standard deviation, sample size, and 95% CI for each depth (LD)
DataSplineCMeans <- DataSplineAll3 %>%
group_by(LD) %>%
summarise(
mean_perC = mean(perC, na.rm = TRUE),
se_perC = sd(perC, na.rm = TRUE) / sqrt(n()),  # Standard error of BD
.groups = "drop")
DataSplineCMeans_CI <- DataSplineAll3 %>%
group_by(LD) %>%
summarise(
mean_perC = mean(perC, na.rm = TRUE),
sd_perC = sd(perC, na.rm = TRUE),
n = n(),
ci_lower_perC = mean_perC - 1.96 * (sd_perC / sqrt(n())),  # Lower bound of the 95% CI
ci_upper_perC = mean_perC + 1.96 * (sd_perC / sqrt(n())),  # Upper bound of the 95% CI
.groups = "drop"
)
plot_perC <- ggplot() +
# Add raw perC points from deepData, with transparency for better visibility of the red line
geom_point(data = deepData, aes(x = perC, y = LD), color = "lightgrey", size = 3, alpha = 0.4) +
# Points for the mean perC (from DataSplineCMeans)
geom_point(data = DataSplineCMeans, aes(x = mean_perC, y = LD), color = "blue", size = 3) +  # Blue points for mean BD
# Error bars for the standard error of BD (make them more prominent by increasing line size)
#geom_errorbar(data = DataSplineMeans, aes(xmin = mean_BD - se_BD, xmax = mean_BD + se_BD, y = LD),
#   width = 0.2, size = 1.5, color = "black") +  # Error bars (black, more prominent)
# LOESS smooth curve with shaded 95% CI
# geom_smooth(data = DataSplineMeans, aes(x = mean_BD, y = LD), method = "loess", se = TRUE, color = "red", size = 1.5) +  # Red line
# Error bars for the 95% Confidence Interval of BD
geom_errorbar(data = DataSplineCMeans_CI, aes(xmin = ci_lower_perC, xmax = ci_upper_perC, y = LD),
width = 0.05, size = 1.5, color = "black") +  # Error bars (black, more prominent)
# LOESS smooth curve with shaded 95% CI
geom_smooth(data = DataSplineCMeans_CI, aes(x = mean_perC, y = LD), method = "loess", se = TRUE, color = "red", size = 0.9) +  # Red line
# Reverse the y-axis for depth (LD)
scale_y_reverse(limits = c(100, 0)) +
# Customize labels and title
labs(x = "Percent Carbon", y = "Depth (cm)", title = "") +
theme_minimal()
# Print the combined plot
print(plot_perC)
# Remove y-axis label for plot_perC and adjust margins for closer alignment
plot_perC_no_ylabel <- plot_perC +
theme(
axis.title.y = element_blank(),  # Removes the y-axis label for plot_perC
axis.text.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
axis.ticks.y = element_blank(),   # Optionally removes the y-axis ticks for plot_perC
plot.margin = margin(0, 5, 5, -100)  # Reduce the right margin to bring the plots closer
)
# Combine the two plots side by side with shared y-axis label and adjusted spacing
FigureBDperC <- ggarrange(
plot_BD, plot_perC_no_ylabel,
ncol = 2,         # 2 columns, side by side
labels = c("a", "b"), # Automatically adds "a" and "b" labels
font.label = list(size = 14, face = "bold"),  # Customize label font
align = "v",  # Align the plots vertically
widths = c(1, 1),  # Equal width for both plots
heights = c(1,1),  # Equal height for both plots
label.x = c(0.05, 0.05),  # Position the labels on the top left
label.y = c(0.95, 0.95),  # Keep the labels near the top
common.legend = TRUE,  # Optionally add a common legend
legend = "top"  # Place the legend on top if needed
)
# Print the combined plot
print(FigureBDperC)
# Optionally save the figure as PNG or PDF
ggsave("FigureBDperC.jpeg", FigureBDperC, path = "C:/Users/F004SPC/Documents/GitHub/deepSoilsErin/graphs", width = 8, height = 4)
citation()
version()
version()
R.version$version.string
# View the results
View(farmMeanStockbyDepthLedge)
# View the results
View(farmMeanStockbyDepthLedge)
View (stockTotals)
print(overallMean)
mean(stockTotals$topCstock)
# Calculate the mean of the topCstock as a percentage of totalCstock
overallMeanPercent <- stockTotals %>%
mutate(percentTop = (topCstock / totalCstock) * 100) %>%   # Calculate percentTop for each row
summarise(meanPercentTop = mean(percentTop, na.rm = TRUE)) %>%  # Calculate the overall mean of percentTop
pull(meanPercentTop)  # Extract the mean value from the summarised data
# Print the result
print(overallMeanPercent)
# Calculate the mean of the topCstock as a percentage of totalCstock across all observations
overallMeanPercent <- stockTotals %>%
mutate(percentTop = (topCstock / totalCstock) * 100) %>%   # Calculate percentTop for each observation
summarise(meanPercentTop = mean(percentTop, na.rm = TRUE)) %>%  # Calculate the overall mean of the percentTop values
pull(meanPercentTop)  # Extract the mean value from the summarised data
# Print the result
print(overallMeanPercent)
# Calculate the mean of the topCstock as a percentage of totalCstock across all observations
overallMeanPercent <- stockTotals %>%
mutate(percentTop = (topCstock / totalCstock) * 100) %>%   # Calculate percentTop for each observation
summarise(meanPercentTop = mean(percentTop, na.rm = TRUE)) %>%  # Calculate the overall mean of the percentTop values
pull(meanPercentTop)  # Extract the mean value from the summarised data
# Print the result
print(overallMeanPercent)
# Calculate the mean of all the individual percentages (topCstock as a percentage of totalCstock)
overallMeanPercent <- stockTotals %>%
mutate(percentTop = (topCstock / totalCstock) * 100) %>%   # Calculate the percentTop for each observation
summarise(meanPercentTop = mean(percentTop, na.rm = TRUE)) %>%  # Calculate the mean of the percentTop values
pull(meanPercentTop)  # Extract the mean value
# Print the result
print(overallMeanPercent)
overallMeanPercent <- stockTotals %>%
mutate(percentTop = (topCstock / totalCstock) * 100) %>%   # Calculate the percentTop for each observation
summarise(meanPercentTop = mean(percentTop, na.rm = TRUE)) %>%  # Calculate the mean of the percentTop values
pull(meanPercentTop)
# Print the result
print(overallMeanPercent)
# Calculate the mean of all the individual percentages (topCstock as a percentage of totalCstock)
overallMeanPercent <- mean((stockTotals$topCstock / stockTotals$totalCstock) * 100, na.rm = TRUE)
# Print the result
print(overallMeanPercent)
