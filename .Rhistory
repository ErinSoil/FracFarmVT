aggregate_stability +
active_carbon +
+ + ph * soil_texture_clay,  data=data, na.action=na.exclude, method="ML")
summary(m2M)
anova(m1M, m2M)
m1M=gls(logitpropM~ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
aggregate_stability * soil_texture_clay +
active_carbon +
+ + ph * soil_texture_clay,  data=data, na.action=na.exclude, method="ML")
summary(m1M)
m1P=gls(mgCpergSoilP~ppt.cm*tmeanC+soil_texture_clay+
+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
summary(m1P)
m2P=gls(mgCpergSoilP~ppt.cm*tmeanC+soil_texture_clay+
+aggregate_stability+active_carbon, data=data, na.action=na.exclude, method="ML")
summary(m2P)
anova(m1P)
anova(m1P, m2P)
F_Final <- fitted(m1P)
R_Final <- residuals(m1P, type = "pearson", scaled = TRUE)
N = !is.na(data$mgCpergSoilP)
Rfull <- NA
Rfull[N] <- R_Final
op <- par(mfrow = c(2,2), mar = c(5,4,1,1))
plot(F_Final, R_Final)
hist(Rfull)
plot(Rfull ~ data$aggregate_stability)
plot(Rfull ~ data$soil_texture_clay)
plot(Rfull ~ data$active_carbon)
plot(Rfull ~ data$tmeanC)
plot(Rfull ~ data$ppt.cm)
plot(Rfull ~ data$ph)
par(op)
op <- par(mfrow = c(2,2), mar = c(5,4,1,1)) #this makes it so all the graphs are plotted in the same window (a 2 x 2 grid)
ppt.cm.c <- summary(m1P)$coefficients[2] #predictor coefficient
ppt.cm.pr <- Rfull + ppt.cm.c*data$ppt.cm  #Residuals + pred coef * predictor value
{scatter.smooth(data$ppt.cm, ppt.cm.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(ppt.cm.c*data$ppt.cm ~ data$ppt.cm), col = "red")}
soil_texture_clay.c <- summary(m1P)$coefficients[3] #predictor coefficient
soil_texture_clay.pr <- Rfull + soil_texture_clay.c*data$soil_texture_clay  #Residuals + pred coef * predictor value
{scatter.smooth(data$soil_texture_clay, soil_texture_clay.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(soil_texture_clay.c*data$soil_texture_clay ~ data$soil_texture_clay), col = "red")}
aggregate_stability.c <- summary(m1P)$coefficients[5] #predictor coefficient
aggregate_stability.pr <- Rfull + aggregate_stability.c*data$aggregate_stability  #Residuals + pred coef * predictor value
{scatter.smooth(data$aggregate_stability, aggregate_stability.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(aggregate_stability.c*data$aggregate_stability ~ data$aggregate_stability), col = "red")}
active_carbon.c <- summary(m1P)$coefficients[6] #predictor coefficient
active_carbon.pr <- Rfull + active_carbon.c*data$active_carbon  #Residuals + pred coef * predictor value
{scatter.smooth(data$active_carbon, active_carbon.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(active_carbon.c*data$active_carbon ~ data$active_carbon), col = "red")}
par(op)
m1P=gls(mgCpergSoilP~ppt.cm*tmeanC+soil_texture_clay+
+aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
summary(m1P)
mPtest=gls(mgCpergSoilP~ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
aggregate_stability * soil_texture_clay +
active_carbon +
+ + ph * soil_texture_clay, data=data, na.action=na.exclude, method="ML")
summary(mPtest)
pred_pptC <- ggpredict(m1P, terms = c("ppt.cm", "tmeanC[6.8,7.5]"))
pred_pptC$tmean_group <- pred_pptC$group
levels(pred_pptC$tmean_group) <- c("low (4.5-7.2)",
"high (7.2-8.6)")
data <- data %>%
drop_na(tmeanC) %>%
dplyr::mutate(tmean_group = cut(tmeanC, breaks = c(4.5,7.2,8.6)))
levels(data$tmean_group) <- c("low (4.5-7.2)",
"high (7.2-8.6)")
mgPOM_pptC <-data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = mgCpergSoilP, col = tmean_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_pptC, mapping = aes(x=x, y=predicted, col = tmean_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil")) +
scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
mgPOM_pptC
summary(data$soil_texture_clay)
pred_pptClay <- ggpredict(m4M, terms = c("ppt.cm", "soil_texture_clay[14.158,23.925]"))
pred_pptClay$clay_group <- pred_pptClay$group
levels(pred_pptClay$clay_group) <- c("low (6-19)",
"high (19.01-54)")
data <- data %>%
drop_na(soil_texture_clay) %>%
dplyr::mutate(clay_group = cut(soil_texture_clay, breaks = c(6,19,54)))
levels(data$clay_group) <- c("low (6-19)",
"high (19.01-54)")
PropM_pptClay <-data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = logitpropM, col = clay_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_pptClay, mapping = aes(x=x, y=predicted, col = clay_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("logit Prop MAOM")) +
scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
PropM_pptClay
#interaction ppt and clay
summary(data$ppt.cm)
summary(data$ppt.cm
summary(data$ppt.cm)
summary(data$soil_texture_clay)
summary(data$soil_texture_clay)
summary(data$ppt.cm)
pred_Clayppt <- ggpredict(m4M, terms = c("soil_texture_clay", "ppt.cm[101,106]"))
pred_Clayppt$ppt_group <- pred_Clayppt$group
levels(pred_Clayppt$ppt_group) <- c("low (92-103)",
"high (103-142)")
data <- data %>%
drop_na(ppt.cm) %>%
dplyr::mutate(ppt_group = cut(ppt.cm, breaks = c(92,101,141)))
levels(data$ppt_group) <- c("low (92-103)",
"high (103-142)")
PropM_Clayppt <-data %>%
ggplot() +
geom_point(aes(x = soil_texture_clay, y = logitpropM, col = ppt_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_Clayppt, mapping = aes(x=x, y=predicted, col = ppt_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("logit Prop MAOM")) +
scale_x_continuous(expression("Percent Clay- Soil Texture"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
PropM_Clayppt
pred_soil_texture_clay <- ggpredict(m4M, terms = c("soil_texture_clay"))
propMAOM_soil_texture_clay <-data %>%
ggplot() +
geom_point(aes(x = soil_texture_clay, y = propM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_soil_texture_clay, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("prop C in MAOM"))+
scale_x_continuous(expression("clay"),
label = scales::comma)
propMAOM_soil_texture_clay
ggsave("propMAOM_soil_texture_clay.jpeg", width = 4, height = 3)
pred_soil_texture_clay <- ggpredict(m4M, terms = c("soil_texture_clay"))
propMAOM_soil_texture_clay <-data %>%
ggplot() +
geom_point(aes(x = soil_texture_clay, y = propM), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_soil_texture_clay, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("logit prop C in MAOM"))+
scale_x_continuous(expression("percent clay texture"),
label = scales::comma)
propMAOM_soil_texture_clay
#interaction tmean and clay
summary(data$tmeanC)
pred_tempClay <- ggpredict(m4M, terms = c("tmeanC", "soil_texture_clay[14.158,23.925]"))
pred_tempClay$clay_group <- pred_tempClay$group
levels(pred_tempClay$clay_group) <- c("low (6-19)",
"high (19.01-54)")
data <- data %>%
drop_na(soil_texture_clay) %>%
dplyr::mutate(clay_group = cut(soil_texture_clay, breaks = c(6,19,54)))
levels(data$clay_group) <- c("low (6-19)",
"high (19.01-54)")
PropM_tempClay <-data %>%
ggplot() +
geom_point(aes(x = tmeanC, y = logitpropM, col = clay_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_tempClay, mapping = aes(x=x, y=predicted, col = clay_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("logit Prop MAOM")) +
scale_x_continuous(expression("Mean Annual Temperature (C)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
PropM_tempClay
pred_tempClay <- ggpredict(m4M, terms = c("tmeanC", "soil_texture_clay[14.158,23.925]"))
pred_tempClay$clay_group <- pred_tempClay$group
levels(pred_tempClay$clay_group) <- c("low (6-19)",
"high (19.01-54)")
data <- data %>%
drop_na(soil_texture_clay) %>%
dplyr::mutate(clay_group = cut(soil_texture_clay, breaks = c(6,19,54)))
levels(data$clay_group) <- c("low (6-19)",
"high (19.01-54)")
PropM_tempClay <-data %>%
ggplot() +
geom_point(aes(x = tmeanC, y = logitpropM, col = clay_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_tempClay, mapping = aes(x=x, y=predicted, col = clay_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("logit Prop MAOM")) +
scale_x_continuous(expression("Mean Annual Temperature (C)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
PropM_tempClay
pred_Claytemp <- ggpredict(m4M, terms = c("soil_texture_clay", "tmeanC[6.7,7.6]"))
pred_Claytemp$temp_group <- pred_Claytemp$group
levels(pred_Claytemp$temp_group) <- c("low (4-7.2)",
"high (7.21-9)")
data <- data %>%
drop_na(tmeanC) %>%
dplyr::mutate(temp_group = cut(tmeanC, breaks = c(4.5,7.2,8.5)))
levels(data$temp_group) <- c("low (4-7.2)",
"high (7.21-9)")
PropM_Claytemp <-data %>%
ggplot() +
geom_point(aes(x = soil_texture_clay, y = logitpropM, col = temp_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_Claytemp, mapping = aes(x=x, y=predicted, col = temp_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("logit Prop MAOM")) +
scale_x_continuous(expression("Percent Clay- Soil Texture"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
PropM_Claytemp
pred_Claytemp <- ggpredict(m4M, terms = c("soil_texture_clay", "tmeanC[6.7,7.6]"))
pred_Claytemp$temp_group <- pred_Claytemp$group
levels(pred_Claytemp$temp_group) <- c("low (4-7.2)",
"high (7.21-9)")
data <- data %>%
drop_na(tmeanC) %>%
dplyr::mutate(temp_group = cut(tmeanC, breaks = c(4.5,7.2,8.5)))
levels(data$temp_group) <- c("low (4-7.2)",
"high (7.21-9)")
PropM_Claytemp <-data %>%
ggplot() +
geom_point(aes(x = soil_texture_clay, y = logitpropM, col = temp_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_Claytemp, mapping = aes(x=x, y=predicted, col = temp_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("logit Prop MAOM")) +
scale_x_continuous(expression("Percent Clay- Soil Texture"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
PropM_Claytemp
pred_Claytemp <- ggpredict(m4M, terms = c("soil_texture_clay", "tmeanC[6.7,7.6]"))
pred_Claytemp$temp_group <- pred_Claytemp$group
levels(pred_Claytemp$temp_group) <- c("low (4-7.2)",
"high (7.2001-9)")
data <- data %>%
drop_na(tmeanC) %>%
dplyr::mutate(temp_group = cut(tmeanC, breaks = c(4.5,7.2,8.5)))
levels(data$temp_group) <- c("low (4-7.2)",
"high (7.21-9)")
PropM_Claytemp <-data %>%
ggplot() +
geom_point(aes(x = soil_texture_clay, y = logitpropM, col = temp_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_Claytemp, mapping = aes(x=x, y=predicted, col = temp_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("logit Prop MAOM")) +
scale_x_continuous(expression("Percent Clay- Soil Texture"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
PropM_Claytemp
pred_Claytemp <- ggpredict(m4M, terms = c("soil_texture_clay", "tmeanC[6.7,7.6]"))
pred_Claytemp$temp_group <- pred_Claytemp$group
levels(pred_Claytemp$temp_group) <- c("low (4-7.2)",
"high (7.201-9)")
data <- data %>%
drop_na(tmeanC) %>%
dplyr::mutate(temp_group = cut(tmeanC, breaks = c(4.5,7.2,8.5)))
levels(data$temp_group) <- c("low (4-7.2)",
"high (7.21-9)")
PropM_Claytemp <-data %>%
ggplot() +
geom_point(aes(x = soil_texture_clay, y = logitpropM, col = temp_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_Claytemp, mapping = aes(x=x, y=predicted, col = temp_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("logit Prop MAOM")) +
scale_x_continuous(expression("Percent Clay- Soil Texture"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
PropM_Claytemp
pred_Claytemp <- ggpredict(m4M, terms = c("soil_texture_clay", "tmeanC[6.7,7.6]"))
pred_Claytemp$temp_group <- pred_Claytemp$group
levels(pred_Claytemp$temp_group) <- c("low (4-7.2)",
"high (7.201-9)")
data <- data %>%
drop_na(tmeanC) %>%
dplyr::mutate(temp_group = cut(tmeanC, breaks = c(4.5,7.2,8.5)))
levels(data$temp_group) <- c("low (4-7.2)",
"high (7.201-9)")
PropM_Claytemp <-data %>%
ggplot() +
geom_point(aes(x = soil_texture_clay, y = logitpropM, col = temp_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_Claytemp, mapping = aes(x=x, y=predicted, col = temp_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("logit Prop MAOM")) +
scale_x_continuous(expression("Percent Clay- Soil Texture"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
PropM_Claytemp
missing_ph <- subset(data, is.na(ph) | ph == "")
missing_field_codes <- missing_ph$Field_Code
print(missing_field_codes)
missing_ph <- subset(data, is.na(ph) | ph == "")
missing_field_codes <- missing_ph$Field_Code
print(missing_field_codes)
missing_ph <- subset(data, is.na(ph) | ph == "")
##call in the analytical data
data <- read.csv("data.csv")
View(data)
missing_ph <- subset(data, is.na(ph) | ph == "")
missing_field_codes <- missing_ph$Field_Code
print(missing_field_codes)
missing_mgCpergSoilP <- subset(data, is.na(mgCpergSoilP) | mgCpergSoilP == "")
missing_field_codes <- missing_mgCpergSoilP$Field_Code
print(missing_field_codes)
m1P=gls(mgCpergSoilP~ppt.cm*tmeanC+soil_texture_clay+
aggregate_stability+active_carbon+
ph, data=data, na.action=na.exclude, method="ML")
summary(m1P)
mPtest=gls(mgCpergSoilP~ppt.cm * soil_texture_clay * tmeanC + ppt.cm * tmeanC +
aggregate_stability * soil_texture_clay +
active_carbon +
+ + ph * soil_texture_clay, data=data, na.action=na.exclude, method="ML")
summary(mPtest)
m2P=gls(mgCpergSoilP~ppt.cm*tmeanC+soil_texture_clay+
+aggregate_stability+active_carbon, data=data, na.action=na.exclude, method="ML")
summary(m2P)
anova(m1P, m2P)
m3P=gls(mgCpergSoilP~ppt.cm*tmeanC
+aggregate_stability+active_carbon
, data=data, na.action=na.exclude, method="ML")
summary(m3P)
anova(m2p,m3P)
anova(m2P,m3P)
m3P=gls(mgCpergSoilP~ppt.cm*tmeanC
+aggregate_stability+active_carbon,
data=data, na.action=na.exclude, method="REML")
summary(m3P)
F_Final <- fitted(m3P)
R_Final <- residuals(m3P, type = "pearson", scaled = TRUE)
N = !is.na(data$mgCpergSoilP)
Rfull <- NA
Rfull[N] <- R_Final
op <- par(mfrow = c(2,2), mar = c(5,4,1,1))
plot(F_Final, R_Final)
hist(Rfull)
plot(Rfull ~ data$aggregate_stability)
plot(Rfull ~ data$soil_texture_clay)
plot(Rfull ~ data$active_carbon)
plot(Rfull ~ data$tmeanC)
plot(Rfull ~ data$ppt.cm)
plot(Rfull ~ data$ph)
par(op)
op <- par(mfrow = c(2,2), mar = c(5,4,1,1)) #this makes it so all the graphs are plotted in the same window (a 2 x 2 grid)
ppt.cm.c <- summary(m3P)$coefficients[2] #predictor coefficient
ppt.cm.pr <- Rfull + ppt.cm.c*data$ppt.cm  #Residuals + pred coef * predictor value
{scatter.smooth(data$ppt.cm, ppt.cm.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(ppt.cm.c*data$ppt.cm ~ data$ppt.cm), col = "red")}
soil_texture_clay.c <- summary(m3P)$coefficients[3] #predictor coefficient
soil_texture_clay.pr <- Rfull + soil_texture_clay.c*data$soil_texture_clay  #Residuals + pred coef * predictor value
{scatter.smooth(data$soil_texture_clay, soil_texture_clay.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(soil_texture_clay.c*data$soil_texture_clay ~ data$soil_texture_clay), col = "red")}
aggregate_stability.c <- summary(m3P)$coefficients[5] #predictor coefficient
aggregate_stability.pr <- Rfull + aggregate_stability.c*data$aggregate_stability  #Residuals + pred coef * predictor value
{scatter.smooth(data$aggregate_stability, aggregate_stability.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(aggregate_stability.c*data$aggregate_stability ~ data$aggregate_stability), col = "red")}
active_carbon.c <- summary(m3P)$coefficients[6] #predictor coefficient
active_carbon.pr <- Rfull + active_carbon.c*data$active_carbon  #Residuals + pred coef * predictor value
{scatter.smooth(data$active_carbon, active_carbon.pr,
lpars = list(col = "green", lwd = 3, lty = 3)) #residual loess
abline(lm(active_carbon.c*data$active_carbon ~ data$active_carbon), col = "red")}
par(op)
own_theme <- theme_bw(base_size = 11) +
theme(rect = element_blank(),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
axis.line = element_line(color = "black"),
panel.grid.minor = element_blank())
pred_pptC <- ggpredict(m3P, terms = c("ppt.cm", "tmeanC[6.8,7.5]"))
pred_pptC$tmean_group <- pred_pptC$group
levels(pred_pptC$tmean_group) <- c("low (4.5-7.2)",
"high (7.2-8.6)")
data <- data %>%
drop_na(tmeanC) %>%
dplyr::mutate(tmean_group = cut(tmeanC, breaks = c(4.5,7.2,8.6)))
levels(data$tmean_group) <- c("low (4.5-7.2)",
"high (7.2-8.6)")
mgPOM_pptC <-data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = mgCpergSoilP, col = tmean_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_pptC, mapping = aes(x=x, y=predicted, col = tmean_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil")) +
scale_x_continuous(expression("Mean Annual Precipitation (cm)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
mgPOM_pptC
pred_tmeanppt <- ggpredict(m3P, terms = c("tmeanC","ppt.cm[101,110]"))
pred_tmeanppt$ppt_group <- pred_tmeanC$group
pred_tmeanppt <- ggpredict(m3P, terms = c("tmeanC","ppt.cm[101,110]"))
pred_tmeanppt$ppt_group <- pred_tmeanppt$group
levels(pred_tmeanppt$ppt_group) <- c("low (92-104)",
"high (104-142)")
data <- data %>%
drop_na(ppt.cm) %>%
dplyr::mutate(ppt_group = cut(ppt.cm, breaks = c(92,104,142)))
levels(data$ppt_group) <- c("low (92-104)",
"high (104-142)")
mgPOM_tmeanppt <-data %>%
ggplot() +
geom_point(aes(x = tmeanC, y = mgCpergSoilP, col = ppt_group), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_tmeanppt, mapping = aes(x=x, y=predicted, col = ppt_group), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
#theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil")) +
scale_x_continuous(expression("Mean Annual Temperature(C)"),
label = scales::comma) +
scale_color_manual(values = c("blue", "red")) # adjust colors if needed
mgPOM_tmeanppt
#ppt and tmeanC, option 2
summary(data$ppt.cm)
m3P=gls(mgCpergSoilP~ppt.cm*tmeanC
+aggregate_stability+active_carbon
, data=data, na.action=na.exclude, method="ML")
summary(m3P)
pred_aggregate_stability <- ggpredict(m3P, terms = c("aggregate_stability"))
mgPOM_aggregate_stability <-data %>%
ggplot() +
geom_point(aes(x = aggregate_stability, y = mgCpergSoilP), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_aggregate_stability, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil"))+
scale_x_continuous(expression("aggregate stability"),
label = scales::comma)
mgPOM_aggregate_stability
pred_active_carbon <- ggpredict(m3P, terms = c("active_carbon"))
mgPOM_active_carbon <-data %>%
ggplot() +
geom_point(aes(x = active_carbon, y = mgCpergSoilP), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_active_carbon, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil"))+
scale_x_continuous(expression("active carbon"),
label = scales::comma)
mgPOM_active_carbon
pred_ppt <- ggpredict(m3P, terms = c("ppt.cm"))
mgPOM_ppt <-data %>%
ggplot() +
geom_point(aes(x = ppt.cm, y = mgCpergSoilP), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_ppt, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil"))+
scale_x_continuous(expression("mean annual precipitation (cm)"),
label = scales::comma)
mgPOM_ppt
pred_temp <- ggpredict(m3P, terms = c("tmeanC"))
mgPOM_temp <-data %>%
ggplot() +
geom_point(aes(x = tmeanC, y = mgCpergSoilP), #plot your data
size = 1.5, alpha = 0.5) +
geom_line(pred_temp, mapping = aes(x=x, y=predicted), #plot the model's prediction (based on linear )
lwd = 1) +
own_theme+
theme(legend.position = "none") +
scale_y_continuous(expression("mg C in POM per g soil"))+
scale_x_continuous(expression("mean annual temperature (C)"),
label = scales::comma)
mgPOM_temp
m3P=gls(mgCpergSoilP~ppt.cm*tmeanC
+aggregate_stability+active_carbon,
data=data, na.action=na.exclude, method="REML")
summary(m3P)
